name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build e Testes
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    steps:
    - uses: actions/checkout@v3

    - name: Configurar vcpkg
      uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'

    - name: Instalar dependências (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev qt6-base-dev

    - name: Instalar dependências (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sdl2 qt@6

    - name: Configurar CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Testes
      working-directory: build
      run: ctest -C ${{ matrix.build_type }} --output-on-failure

  code-analysis:
    name: Análise de Código
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Análise com Clang-Tidy
      uses: ZedThree/clang-tidy-review@v0.14.0
      with:
        cmake_command: cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Análise com Cppcheck
      uses: cpp-linter/cpp-linter-action@v2
      with:
        style: file

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  documentation:
    name: Documentação
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Instalar Doxygen
      run: sudo apt-get install -y doxygen graphviz

    - name: Gerar Documentação
      run: doxygen Doxyfile

    - name: Deploy para GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/doxygen/html

  release:
    name: Release
    needs: [build, code-analysis, documentation]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Criar Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/mega_emu
        asset_name: mega_emu
        asset_content_type: application/octet-stream
