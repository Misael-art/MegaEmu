#include <stdint.h>/** * @file error_codes.h * @brief Definição dos códigos de erro do emulador */#ifndef EMU_ERROR_CODES_H#define EMU_ERROR_CODES_H#ifdef __cplusplusextern "C"{#endif/* Códigos de erro */typedef enum{    EMU_ERROR_NONE = 0,            /* Sem erro */    EMU_ERROR_GENERIC,             /* Erro genérico */    EMU_ERROR_NULL_POINTER,        /* Ponteiro nulo */    EMU_ERROR_INVALID_PARAM,       /* Parâmetro inválido */    EMU_ERROR_INVALID_STATE,       /* Estado inválido */    EMU_ERROR_PERMISSION,          /* Sem permissão */    EMU_ERROR_MEMORY_ERROR,        /* Erro de memória */    EMU_ERROR_FILE_NOT_FOUND,      /* Arquivo não encontrado */    EMU_ERROR_FILE_OPEN_FAILED,    /* Falha ao abrir arquivo */    EMU_ERROR_FILE_READ_FAILED,    /* Falha ao ler arquivo */    EMU_ERROR_FILE_WRITE_FAILED,   /* Falha ao escrever arquivo */    EMU_ERROR_INVALID_FORMAT,      /* Formato inválido */    EMU_ERROR_TIMEOUT,             /* Tempo esgotado */    EMU_ERROR_BUSY,                /* Sistema ocupado */    EMU_ERROR_NOT_IMPLEMENTED,     /* Função não implementada */    EMU_ERROR_UNSUPPORTED,         /* Operação não suportada */    EMU_ERROR_MAX                  /* Número máximo de erros */} emu_error_t;/* Macro para verificação de erros */#define EMU_CHECK_ERROR(err) \    if (err != EMU_ERROR_NONE) \        return err/* Macro para verificação de ponteiro nulo */#define EMU_CHECK_NULL(ptr) \    if (ptr == NULL) \        return EMU_ERROR_NULL_POINTER/* Macro para verificação de limites */#define EMU_CHECK_BOUNDS(val, min, max) \    if ((val) < (min) || (val) > (max)) \        return EMU_ERROR_INVALID_PARAM/* Macro para lançar erro */#define EMU_THROW(err, msg) \    do { \        emu_error_set(err, msg, __FILE__, __LINE__); \        return err; \    } while (0)#ifdef __cplusplus}#endif#endif /* EMU_ERROR_CODES_H */