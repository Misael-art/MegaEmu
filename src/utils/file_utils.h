/** * @file file_utils.h * @brief Funções utilitárias para manipulação de arquivos * @author Mega_Emu Team * @version 1.0.0 * @date 2024-07-25 */#ifndef FILE_UTILS_H#define FILE_UTILS_H#include <stdio.h>#include <stdint.h>#include <stdbool.h>#include <time.h>/** * @brief Verifica se um arquivo existe * * @param path Caminho do arquivo * @return true se o arquivo existir, false caso contrário */bool file_exists(const char *path);/** * @brief Obtém o tamanho de um arquivo * * @param path Caminho do arquivo * @return Tamanho do arquivo em bytes, ou -1 em caso de erro */int64_t get_file_size(const char *path);/** * @brief Obtém a data de modificação de um arquivo * * @param path Caminho do arquivo * @return Data de modificação do arquivo como timestamp, ou -1 em caso de erro */time_t get_file_modification_time(const char *path);/** * @brief Cria um diretório * * @param path Caminho do diretório * @return true se o diretório foi criado com sucesso ou já existia, false caso contrário */bool create_directory(const char *path);/** * @brief Cria diretórios recursivamente * * @param path Caminho dos diretórios a serem criados * @return true se os diretórios foram criados com sucesso ou já existiam, false caso contrário */bool create_directories(const char *path);/** * @brief Exclui um arquivo * * @param path Caminho do arquivo * @return true se o arquivo foi excluído com sucesso, false caso contrário */bool delete_file(const char *path);/** * @brief Copia um arquivo * * @param src_path Caminho do arquivo de origem * @param dst_path Caminho do arquivo de destino * @return true se o arquivo foi copiado com sucesso, false caso contrário */bool copy_file(const char *src_path, const char *dst_path);/** * @brief Move um arquivo * * @param src_path Caminho do arquivo de origem * @param dst_path Caminho do arquivo de destino * @return true se o arquivo foi movido com sucesso, false caso contrário */bool move_file(const char *src_path, const char *dst_path);/** * @brief Renomeia um arquivo * * @param old_path Caminho antigo do arquivo * @param new_path Novo caminho do arquivo * @return true se o arquivo foi renomeado com sucesso, false caso contrário */bool rename_file(const char *old_path, const char *new_path);/** * @brief Lista os arquivos em um diretório * * @param dir_path Caminho do diretório * @param extension Extensão dos arquivos a serem listados (NULL para listar todos) * @param files Ponteiro para array de strings onde os nomes dos arquivos serão armazenados * @param max_files Número máximo de arquivos a serem listados * @return Número de arquivos encontrados, ou -1 em caso de erro */int list_directory_files(const char *dir_path, const char *extension,                         char **files, int max_files);/** * @brief Obtém o diretório base do executável * * @param buffer Buffer para armazenar o caminho * @param buffer_size Tamanho do buffer * @return true se o caminho foi obtido com sucesso, false caso contrário */bool get_executable_directory(char *buffer, size_t buffer_size);/** * @brief Obtém o caminho completo de um arquivo * * @param relative_path Caminho relativo do arquivo * @param full_path Buffer para armazenar o caminho completo * @param full_path_size Tamanho do buffer * @return true se o caminho foi obtido com sucesso, false caso contrário */bool get_full_path(const char *relative_path, char *full_path, size_t full_path_size);/** * @brief Lê o conteúdo de um arquivo de texto * * @param path Caminho do arquivo * @param buffer Buffer para armazenar o conteúdo * @param buffer_size Tamanho do buffer * @return true se o arquivo foi lido com sucesso, false caso contrário */bool read_text_file(const char *path, char *buffer, size_t buffer_size);/** * @brief Escreve conteúdo em um arquivo de texto * * @param path Caminho do arquivo * @param content Conteúdo a ser escrito * @return true se o arquivo foi escrito com sucesso, false caso contrário */bool write_text_file(const char *path, const char *content);/** * @brief Lê dados binários de um arquivo * * @param path Caminho do arquivo * @param buffer Buffer para armazenar os dados * @param buffer_size Tamanho do buffer * @param bytes_read Ponteiro para armazenar o número de bytes lidos (pode ser NULL) * @return true se o arquivo foi lido com sucesso, false caso contrário */bool read_binary_file(const char *path, void *buffer, size_t buffer_size, size_t *bytes_read);/** * @brief Escreve dados binários em um arquivo * * @param path Caminho do arquivo * @param data Dados a serem escritos * @param data_size Tamanho dos dados * @return true se o arquivo foi escrito com sucesso, false caso contrário */bool write_binary_file(const char *path, const void *data, size_t data_size);#endif /* FILE_UTILS_H */