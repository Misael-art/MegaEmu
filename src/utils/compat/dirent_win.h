#include <stdint.h>/** * @file dirent_win.h * @brief Implementação de compatibilidade de dirent.h para Windows */#ifndef DIRENT_WIN_H#define DIRENT_WIN_H#ifdef _WIN32#include <windows.h>#include <stdlib.h>#include <string.h>/** * @brief Estrutura de diretório para Windows */typedef struct DIR {    HANDLE handle;    WIN32_FIND_DATAA find_data;    struct dirent* current;    char path[MAX_PATH];    int32_t first_read;} DIR;/** * @brief Estrutura de entrada de diretório */struct dirent {    char d_name[MAX_PATH];    int32_t d_type;};/** * @brief Tipos de arquivo */enum {    DT_UNKNOWN = 0,    DT_REG = 1,    DT_DIR = 2,    DT_LNK = 3};/** * @brief Abre um diretório * * @param dirname Nome do diretório * @return DIR* Ponteiro para o diretório aberto */static DIR* opendir(const char* dirname) {    DIR* dir = (DIR*)malloc(sizeof(DIR));    if (dir == NULL) {        return NULL;    }    strncpy(dir->path, dirname, MAX_PATH - 3);    size_t len = strlen(dir->path);    if (len > 0 && dir->path[len - 1] != '/' && dir->path[len - 1] != '\\') {        dir->path[len] = '\\';        dir->path[len + 1] = '*';        dir->path[len + 2] = '\0';    } else {        dir->path[len] = '*';        dir->path[len + 1] = '\0';    }    dir->handle = FindFirstFileA(dir->path, &dir->find_data);    if (dir->handle == INVALID_HANDLE_VALUE) {        free(dir);        return NULL;    }    dir->current = (struct dirent*)malloc(sizeof(struct dirent));    if (dir->current == NULL) {        FindClose(dir->handle);        free(dir);        return NULL;    }    dir->first_read = 1;    return dir;}/** * @brief Lê a próxima entrada do diretório * * @param dir Diretório * @return struct dirent* Próxima entrada */static struct dirent* readdir(DIR* dir) {    if (dir == NULL || dir->current == NULL) {        return NULL;    }    if (dir->first_read) {        dir->first_read = 0;    } else {        if (!FindNextFileA(dir->handle, &dir->find_data)) {            return NULL;        }    }    strncpy(dir->current->d_name, dir->find_data.cFileName, MAX_PATH);    if (dir->find_data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {        dir->current->d_type = DT_DIR;    } else {        dir->current->d_type = DT_REG;    }    return dir->current;}/** * @brief Fecha um diretório * * @param dir Diretório * @return int32_t 0 em caso de sucesso */static int32_t closedir(DIR* dir) {    if (dir == NULL) {        return -1;    }    if (dir->handle != INVALID_HANDLE_VALUE) {        FindClose(dir->handle);    }    if (dir->current != NULL) {        free(dir->current);    }    free(dir);    return 0;}#endif /* _WIN32 */#endif /* DIRENT_WIN_H */