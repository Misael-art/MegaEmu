/** * @file save_state.h * @brief Definições de estruturas e funções para salvar e carregar estados de jogo * @author Mega_Emu Team * @version 1.0.0 * @date 2024-07-25 */#ifndef SAVE_STATE_H#define SAVE_STATE_H#include <stdint.h>#include <stdbool.h>#include <SDL2/SDL.h>/** * @brief Estrutura para informações de save state */typedef struct{    uint32_t magic;             // Assinatura para identificar o arquivo    uint32_t version;           // Versão do formato    uint32_t platform_id;       // Identificador da plataforma (NES, SNES, etc.)    uint32_t data_size;         // Tamanho dos dados    uint32_t timestamp;         // Timestamp de quando foi salvo    char game_title[128];       // Título do jogo    char game_hash[64];         // Hash do jogo (para validar compatibilidade)    uint32_t screenshot_offset; // Offset para a screenshot dentro do arquivo    uint32_t screenshot_size;   // Tamanho da screenshot    uint32_t emulator_version;  // Versão do emulador    uint8_t reserved[64];       // Dados reservados para uso futuro} save_state_header_t;/** * @brief Tipo de função para salvar um estado * * @param path Caminho onde salvar o estado * @return true se o salvamento foi bem-sucedido, false caso contrário */typedef bool (*save_state_save_fn)(const char *path);/** * @brief Tipo de função para carregar um estado * * @param path Caminho de onde carregar o estado * @return true se o carregamento foi bem-sucedido, false caso contrário */typedef bool (*save_state_load_fn)(const char *path);/** * @brief Salva um estado do NES * * @param path Caminho onde salvar o estado * @return true se o salvamento foi bem-sucedido, false caso contrário */bool save_state_save_nes(const char *path);/** * @brief Carrega um estado do NES * * @param path Caminho de onde carregar o estado * @return true se o carregamento foi bem-sucedido, false caso contrário */bool save_state_load_nes(const char *path);/** * @brief Salva um estado do SNES * * @param path Caminho onde salvar o estado * @return true se o salvamento foi bem-sucedido, false caso contrário */bool save_state_save_snes(const char *path);/** * @brief Carrega um estado do SNES * * @param path Caminho de onde carregar o estado * @return true se o carregamento foi bem-sucedido, false caso contrário */bool save_state_load_snes(const char *path);/** * @brief Salva um estado do Genesis * * @param path Caminho onde salvar o estado * @return true se o salvamento foi bem-sucedido, false caso contrário */bool save_state_save_genesis(const char *path);/** * @brief Carrega um estado do Genesis * * @param path Caminho de onde carregar o estado * @return true se o carregamento foi bem-sucedido, false caso contrário */bool save_state_load_genesis(const char *path);/** * @brief Obtém a função de salvar estado para a plataforma especificada * * @param platform_id ID da plataforma * @return Função para salvar estado da plataforma, ou NULL se não suportado */save_state_save_fn save_state_get_save_fn(uint32_t platform_id);/** * @brief Obtém a função de carregar estado para a plataforma especificada * * @param platform_id ID da plataforma * @return Função para carregar estado da plataforma, ou NULL se não suportado */save_state_load_fn save_state_get_load_fn(uint32_t platform_id);/** * @brief Verifica se um arquivo é um save state válido * * @param path Caminho para o arquivo * @param platform_id Ponteiro para receber o ID da plataforma (pode ser NULL) * @return true se for um save state válido, false caso contrário */bool save_state_is_valid(const char *path, uint32_t *platform_id);/** * @brief Captura uma screenshot do estado atual * * @param renderer Renderizador SDL * @param texture Textura SDL contendo a tela atual * @param buffer Ponteiro para o buffer onde a screenshot será armazenada * @param buffer_size Tamanho do buffer * @param bytes_written Ponteiro para receber o número de bytes escritos * @return true se a captura foi bem-sucedida, false caso contrário */bool save_state_capture_screenshot(SDL_Renderer *renderer, SDL_Texture *texture,                                   uint8_t *buffer, size_t buffer_size,                                   size_t *bytes_written);/** * @brief Lê uma screenshot de um save state * * @param path Caminho para o arquivo de save state * @param renderer Renderizador SDL * @param texture Ponteiro para receber a textura da screenshot * @return true se a leitura foi bem-sucedida, false caso contrário */bool save_state_read_screenshot(const char *path, SDL_Renderer *renderer,                                SDL_Texture **texture);#endif /* SAVE_STATE_H */