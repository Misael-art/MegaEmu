#include <stdint.h>#ifndef GUI_SHADERS_H#define GUI_SHADERS_H#include "gui_types.h"#include "sdl2_backend.h"#ifdef __cplusplusextern "C"{#endif    /* Tipos de shaders */    typedef enum gui_shader_type_e    {        GUI_SHADER_BASIC = 0,        GUI_SHADER_BLUR,        GUI_SHADER_CRT,        GUI_SHADER_WAVE,        GUI_SHADER_COLOR_CORRECTION,        GUI_SHADER_CHROMATIC_ABERRATION,        GUI_SHADER_MOTION_BLUR,        GUI_SHADER_BLOOM,        GUI_SHADER_HDR,        GUI_SHADER_MAX    } gui_shader_type_t;    /* Parâmetros dos shaders */    typedef struct gui_shader_params_s    {        float values[16];      /* Valores genéricos para o shader */        gui_color_t colors[4]; /* Cores para o shader */        float time;            /* Tempo para animação */    } gui_shader_params_t;    /* Estrutura de shader */    typedef struct gui_shader_s    {        gui_shader_type_t type;        gui_shader_params_t params;        void *shader_program;  /* Ponteiro para o programa de shader (específico da implementação) */        char *vertex_shader;   /* Código fonte do vertex shader */        char *fragment_shader; /* Código fonte do fragment shader */        gui_bool_t compiled;   /* Flag indicando se o shader foi compilado */    } gui_shader_t;    /* Sistema de shaders */    typedef struct gui_shader_system_s    {        gui_shader_t *shaders;        size_t shader_count;        SDL_Texture *buffer_texture;        SDL_Renderer *renderer;        gui_bool_t initialized;    } gui_shader_system_t;    /* Funções de inicialização */    gui_result_t gui_shaders_init(gui_shader_system_t *system,                                  gui_sdl2_backend_t *backend);    void gui_shaders_shutdown(gui_shader_system_t *system);    /* Gerenciamento de shaders */    gui_result_t gui_shaders_add(gui_shader_system_t *system,                                 gui_shader_type_t type,                                 const char *vertex_src,                                 const char *fragment_src,                                 gui_shader_params_t params);    void gui_shaders_remove(gui_shader_system_t *system,                            gui_shader_type_t type);    void gui_shaders_set_params(gui_shader_system_t *system,                                gui_shader_type_t type,                                gui_shader_params_t params);    /* Aplicação de shaders */    gui_result_t gui_shaders_begin_frame(gui_shader_system_t *system);    gui_result_t gui_shaders_end_frame(gui_shader_system_t *system);    gui_result_t gui_shaders_apply(gui_shader_system_t *system,                                   gui_shader_type_t type,                                   SDL_Texture *source,                                   SDL_Texture *target);    /* Funções auxiliares */    gui_result_t gui_shaders_compile(gui_shader_system_t *system,                                     gui_shader_type_t type);    gui_result_t gui_shaders_reload(gui_shader_system_t *system,                                    gui_shader_type_t type,                                    const char *vertex_src,                                    const char *fragment_src);    gui_result_t gui_shaders_get_uniform_location(gui_shader_system_t *system,                                                  gui_shader_type_t type,                                                  const char *name,                                                  int32_t *location);    /* Funções para shaders específicos */    gui_result_t gui_shader_create_blur(gui_shader_system_t *system, float radius);    gui_result_t gui_shader_create_crt(gui_shader_system_t *system,                                       float curvature,                                       float vignette,                                       float scanline_intensity);    gui_result_t gui_shader_create_wave(gui_shader_system_t *system,                                        float amplitude,                                        float frequency);    gui_result_t gui_shader_create_color_correction(gui_shader_system_t *system,                                                    float brightness,                                                    float contrast,                                                    float saturation,                                                    float gamma);    gui_result_t gui_shader_create_chromatic_aberration(gui_shader_system_t *system,                                                        float intensity,                                                        float angle);    gui_result_t gui_shader_create_motion_blur(gui_shader_system_t *system,                                               float intensity,                                               float angle);    gui_result_t gui_shader_create_bloom(gui_shader_system_t *system,                                         float threshold,                                         float intensity);    gui_result_t gui_shader_create_hdr(gui_shader_system_t *system,                                       float exposure,                                       float gamma);    /* Código fonte dos shaders pré-definidos */    extern const char *GUI_VERTEX_SHADER_BASIC;    extern const char *GUI_FRAGMENT_SHADER_BASIC;    extern const char *GUI_FRAGMENT_SHADER_BLUR;    extern const char *GUI_FRAGMENT_SHADER_CRT;    extern const char *GUI_FRAGMENT_SHADER_WAVE;    extern const char *GUI_FRAGMENT_SHADER_COLOR_CORRECTION;    extern const char *GUI_FRAGMENT_SHADER_CHROMATIC_ABERRATION;    extern const char *GUI_FRAGMENT_SHADER_MOTION_BLUR;    extern const char *GUI_FRAGMENT_SHADER_BLOOM;    extern const char *GUI_FRAGMENT_SHADER_HDR;#ifdef __cplusplus}#endif#endif /* GUI_SHADERS_H */