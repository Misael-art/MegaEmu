#include <stdint.h>#ifndef GUI_MODERN_EFFECTS_H#define GUI_MODERN_EFFECTS_H#ifdef __cplusplusextern "C" {#endif#include "gui_types.h"#include "shaders.h"// Tipos de efeitos modernostypedef enum{    MODERN_EFFECT_NONE = 0,    MODERN_EFFECT_VOLUMETRIC_LIGHT, // God rays    MODERN_EFFECT_WEATHER,          // Chuva e neve    MODERN_EFFECT_REFLECTION,       // Reflexos em superfícies    MODERN_EFFECT_PARTICLES,        // Sistema de partículas    MODERN_EFFECT_DEPTH_OF_FIELD,   // Desfoque de profundidade    MODERN_EFFECT_BLOOM_HDR         // Bloom com HDR} modern_effect_type_t;// Tipos de climatypedef enum{    WEATHER_NONE = 0,    WEATHER_RAIN,     // Chuva    WEATHER_SNOW,     // Neve    WEATHER_STORM,    // Tempestade    WEATHER_FOG,      // Neblina    WEATHER_HEAT_WAVE // Ondas de calor} weather_type_t;// Configurações de luz volumétricatypedef struct{    vec2_t light_pos;        // Posição da luz    gui_color_t light_color; // Cor da luz    float density;           // Densidade dos raios    float scatter;           // Dispersão da luz    int32_t num_samples;         // Amostras de ray marching    float falloff;           // Atenuação da luz    gui_bool_t use_noise;    // Usar ruído para variação    float noise_scale;       // Escala do ruído} volumetric_light_params_t;// Configurações de climatypedef struct{    weather_type_t type;       // Tipo de clima    float intensity;           // Intensidade do efeito    float wind_speed;          // Velocidade do vento    float wind_direction;      // Direção do vento    float accumulation;        // Acúmulo (neve)    float splash_size;         // Tamanho dos respingos    gui_color_t weather_color; // Cor do efeito    gui_bool_t use_lighting;   // Aplicar iluminação} weather_params_t;// Configurações de reflexãotypedef struct{    float reflection_strength; // Intensidade dos reflexos    float roughness;           // Rugosidade da superfície    float fresnel;             // Efeito fresnel    int32_t max_steps;             // Passos de ray marching    float thickness;           // Espessura da superfície    gui_bool_t use_blur;       // Desfocar reflexos    float blur_radius;         // Raio do desfoque} reflection_params_t;// Configurações de partículastypedef struct{    int32_t max_particles;       // Número máximo de partículas    float spawn_rate;        // Taxa de geração    float lifetime;          // Tempo de vida    float size_start;        // Tamanho inicial    float size_end;          // Tamanho final    gui_color_t color_start; // Cor inicial    gui_color_t color_end;   // Cor final    float velocity;          // Velocidade    float gravity;           // Gravidade    gui_bool_t collide;      // Colisão com obstáculos    gui_bool_t emit_light;   // Emitir luz} particle_params_t;// Configurações de profundidadetypedef struct{    float focal_distance;  // Distância focal    float focal_range;     // Range focal    float blur_strength;   // Intensidade do desfoque    int32_t blur_samples;      // Amostras de blur    gui_bool_t use_bokeh;  // Efeito bokeh    float bokeh_threshold; // Threshold do bokeh} depth_params_t;// Parâmetros globaistypedef struct{    volumetric_light_params_t volumetric;    weather_params_t weather;    reflection_params_t reflection;    particle_params_t particles;    depth_params_t depth;    float global_intensity; // Intensidade global    gui_bool_t enable_hdr;  // Habilitar HDR    float exposure;         // Exposição HDR} modern_effect_params_t;// Sistema de efeitos modernostypedef struct{    modern_effect_params_t params;    SDL_Texture *scene_buffer;    SDL_Texture *light_buffer;    SDL_Texture *mask_buffer;    SDL_Texture *depth_buffer;    SDL_Texture *particle_buffer;    gui_shader_system_t *shader_system;    gui_bool_t initialized;    int32_t source_width;    int32_t source_height;    float time; // Tempo para animações} modern_effect_system_t;// Funções de inicializaçãogui_result_t modern_effects_init(modern_effect_system_t *system,                                 gui_shader_system_t *shaders,                                 int32_t source_width,                                 int32_t source_height);void modern_effects_shutdown(modern_effect_system_t *system);// Funções de configuraçãogui_result_t modern_effects_set_params(modern_effect_system_t *system,                                       const modern_effect_params_t *params);// Funções de renderizaçãogui_result_t modern_effects_begin_frame(modern_effect_system_t *system,                                        SDL_Texture *target);gui_result_t modern_effects_apply(modern_effect_system_t *system,                                  SDL_Texture *source,                                  SDL_Texture *target);gui_result_t modern_effects_end_frame(modern_effect_system_t *system);// Funções específicas para cada efeitogui_result_t modern_effect_apply_volumetric(modern_effect_system_t *system,                                            SDL_Texture *source,                                            SDL_Texture *target,                                            const volumetric_light_params_t *params);gui_result_t modern_effect_apply_weather(modern_effect_system_t *system,                                         SDL_Texture *source,                                         SDL_Texture *target,                                         const weather_params_t *params);gui_result_t modern_effect_apply_reflection(modern_effect_system_t *system,                                            SDL_Texture *source,                                            SDL_Texture *target,                                            const reflection_params_t *params);gui_result_t modern_effect_apply_particles(modern_effect_system_t *system,                                           SDL_Texture *source,                                           SDL_Texture *target,                                           const particle_params_t *params);gui_result_t modern_effect_apply_depth(modern_effect_system_t *system,                                       SDL_Texture *source,                                       SDL_Texture *target,                                       const depth_params_t *params);// Funções auxiliares para transição SDL2->SDL3#if defined(SDL_MAJOR_VERSION) && SDL_MAJOR_VERSION >= 3typedef SDL_FTexture SDL_Texture;#define SDL_CreateTexture SDL_CreateTextureWithProperties#define SDL_DestroyTexture SDL_DestroyTexture#endif#endif // GUI_MODERN_EFFECTS_H