#include <stdint.h>#ifndef GUI_VOLUMETRIC_EFFECTS_H#define GUI_VOLUMETRIC_EFFECTS_H#include "gui_types.h"#include "sdl2_backend.h"#include "shaders.h"#ifdef __cplusplusextern "C"{#endif    /* Tipos de backend */    typedef enum vol_backend_type_e    {        VOL_BACKEND_SDL3_GL,     /* SDL3 com OpenGL */        VOL_BACKEND_SDL3_VULKAN, /* SDL3 com Vulkan */        VOL_BACKEND_SDL2_GL,     /* SDL2 com OpenGL (compatibilidade) */        VOL_BACKEND_CUSTOM,      /* Backend personalizado */        VOL_BACKEND_MAX    } vol_backend_type_t;    /* Vetor 2D */    typedef struct vol_vector2_s    {        float x;        float y;    } vol_vector2_t;    /* Configuração de luz */    typedef struct vol_light_config_s    {        vol_vector2_t position;        float intensity;        float radius;        gui_color_t color;        float flicker_speed;        float flicker_intensity;    } vol_light_config_t;    /* Configuração de reflexo na água */    typedef struct vol_water_reflection_s    {        float wave_height;        float wave_speed;        float distortion;        float transparency;    } vol_water_reflection_t;    /* Configuração de clima */    typedef struct vol_weather_config_s    {        float rain_intensity;        float wind_speed;        float cloud_coverage;        float lightning_frequency;    } vol_weather_config_t;    /* Configuração de profundidade de campo */    typedef struct vol_dof_config_s    {        float focal_distance;        float focal_range;        float blur_strength;    } vol_dof_config_t;    /* Configuração de partículas */    typedef struct vol_particle_config_s    {        float spawn_rate;        float lifetime;        float size;        float velocity;        gui_color_t color;    } vol_particle_config_t;    /* Estado do sistema de efeitos */    typedef struct vol_effects_state_s    {        vol_backend_type_t backend_type;        void *renderer_data;        int32_t width;        int32_t height;        int32_t quality_level;        gui_bool_t initialized;        gui_bool_t effects_enabled;        /* Configurações */        vol_light_config_t light;        vol_water_reflection_t water;        vol_weather_config_t weather;        vol_dof_config_t dof;        vol_particle_config_t particles;        /* Sistema de shaders */        gui_shader_system_t *shader_system;    } vol_effects_state_t;    /* Configuração de inicialização */    typedef struct vol_init_config_s    {        vol_backend_type_t backend_type;        int32_t width;               /* Largura da tela */        int32_t height;              /* Altura da tela */        int32_t quality_level;       /* Nível de qualidade (1-5) */        const char *shader_path; /* Caminho para os shaders */        void *backend_data;      /* Dados específicos do backend */    } vol_init_config_t;    /* Funções de inicialização e finalização */    gui_result_t vol_effects_init(vol_effects_state_t *state,                                  const vol_init_config_t *config);    void vol_effects_shutdown(vol_effects_state_t *state);    /* Funções de renderização */    gui_result_t vol_effects_begin_frame(vol_effects_state_t *state);    gui_result_t vol_effects_end_frame(vol_effects_state_t *state);    gui_result_t vol_effects_render(vol_effects_state_t *state,                                    void *scene_texture,                                    void *output_texture);    /* Funções para controle de obstáculos de luz */    gui_result_t vol_effects_set_light_mask(vol_effects_state_t *state,                                            void *mask_texture);    gui_result_t vol_effects_add_light_occluder(vol_effects_state_t *state,                                                vol_vector2_t position,                                                float width,                                                float height,                                                float opacity);    /* Funções para configuração de efeitos */    void vol_effects_set_light(vol_effects_state_t *state,                               const vol_light_config_t *config);    void vol_effects_set_water(vol_effects_state_t *state,                               const vol_water_reflection_t *config);    void vol_effects_set_weather(vol_effects_state_t *state,                                 const vol_weather_config_t *config);    void vol_effects_set_dof(vol_effects_state_t *state,                             const vol_dof_config_t *config);    void vol_effects_set_particles(vol_effects_state_t *state,                                   const vol_particle_config_t *config);    /* Funções para presets de plataforma */    gui_result_t vol_effects_load_preset(vol_effects_state_t *state,                                         const char *preset_name);    gui_result_t vol_effects_save_preset(vol_effects_state_t *state,                                         const char *preset_name);    /* Funções auxiliares */    gui_result_t vol_effects_get_stats(vol_effects_state_t *state,                                       float *fps,                                       float *frame_time,                                       float *gpu_load);    gui_result_t vol_effects_set_quality(vol_effects_state_t *state,                                         int32_t quality_level);#ifdef __cplusplus}#endif#endif /* GUI_VOLUMETRIC_EFFECTS_H */