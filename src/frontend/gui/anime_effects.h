#include <stdint.h>#ifndef GUI_ANIME_EFFECTS_H#define GUI_ANIME_EFFECTS_H#ifdef __cplusplusextern "C" {#endif#include "gui_types.h"#include "shaders.h"// Tipos de efeitos anime/mangatypedef enum{    ANIME_EFFECT_NONE = 0,    ANIME_EFFECT_CEL_SHADING,    // Estilo cel-shading básico    ANIME_EFFECT_OUTLINE,        // Detecção de contornos    ANIME_EFFECT_COLOR_QUANTIZE, // Quantização de cores para estilo mangá    ANIME_EFFECT_SPEED_LINES,    // Linhas de velocidade/ação    ANIME_EFFECT_TONE_MAPPING,   // Tramas e texturas estilo mangá    ANIME_EFFECT_BLOOM_STYLIZED, // Bloom estilizado para brilhos    ANIME_EFFECT_COMIC_PANEL     // Efeito de painéis de história em quadrinhos} anime_effect_type_t;// Estilos de artetypedef enum{    ANIME_STYLE_MODERN = 0, // Estilo moderno (ex: Demon Slayer)    ANIME_STYLE_CLASSIC,    // Estilo clássico (ex: Dragon Ball)    ANIME_STYLE_SHONEN,     // Estilo shonen dinâmico (ex: Naruto)    ANIME_STYLE_SHOJO,      // Estilo shojo suave (ex: Sailor Moon)    ANIME_STYLE_SEINEN,     // Estilo seinen detalhado (ex: Berserk)    ANIME_STYLE_CHIBI,      // Estilo chibi/super-deformed    ANIME_STYLE_CYBERPUNK,  // Estilo cyberpunk (ex: Ghost in the Shell)    ANIME_STYLE_WATERCOLOR  // Estilo aquarela (ex: Ghibli)} anime_style_t;// Configurações de contornotypedef struct{    float thickness;        // Espessura do contorno (0.0 - 5.0)    gui_color_t color;      // Cor do contorno    float edge_threshold;   // Limiar de detecção de borda (0.0 - 1.0)    gui_bool_t color_based; // Usar cores diferentes baseadas no objeto    gui_bool_t depth_based; // Usar dados de profundidade para contornos} anime_outline_params_t;// Configurações de cel-shadingtypedef struct{    int32_t shade_levels;            // Número de níveis de sombreamento (2-5)    float shade_threshold[4];    // Limiares entre níveis de sombreamento    gui_color_t shade_colors[5]; // Cores para cada nível    float smoothness;            // Suavidade entre níveis (0.0 - 1.0)    gui_bool_t specular;         // Habilitar realces especulares} anime_cel_params_t;// Configurações de quantização de corestypedef struct{    int32_t color_levels;     // Níveis de quantização de cor (2-16)    float saturation;     // Saturação (0.0 - 2.0)    float contrast;       // Contraste (0.0 - 2.0)    gui_bool_t posterize; // Efeito de posterização} anime_color_params_t;// Configurações de linhas de velocidadetypedef struct{    float intensity;    // Intensidade (0.0 - 1.0)    float direction[2]; // Direção das linhas (normalizado)    float length;       // Comprimento das linhas (0.0 - 100.0)    gui_color_t color;  // Cor das linhas    float density;      // Densidade das linhas (0.0 - 1.0)} anime_speed_lines_params_t;// Configurações de tramas/tonstypedef struct{    int32_t pattern_type;    // Tipo de padrão (0-5: pontos, linhas, cruzado, etc)    float scale;         // Escala do padrão (0.1 - 10.0)    float threshold;     // Limiar de aplicação (0.0 - 1.0)    float rotation;      // Rotação do padrão (0.0 - 360.0)    gui_bool_t inverted; // Inverter o padrão} anime_tone_params_t;// Configurações de bloom estilizadotypedef struct{    float intensity;       // Intensidade do bloom (0.0 - 1.0)    float threshold;       // Limiar para o bloom (0.0 - 1.0)    float radius;          // Raio do efeito (1.0 - 20.0)    gui_color_t tint;      // Cor do bloom    gui_bool_t anamorphic; // Efeito anamórfico (mais horizontal)} anime_bloom_params_t;// Configurações de painéis de quadrinhostypedef struct{    int32_t layout;               // Layout dos painéis (0-5)    float border_thickness;   // Espessura da borda (0.0 - 10.0)    gui_color_t border_color; // Cor da borda    float panel_gap;          // Espaço entre painéis (0.0 - 50.0)    gui_bool_t dynamic;       // Painéis dinâmicos baseados na ação} anime_panel_params_t;// Parâmetros globais para efeitos de animetypedef struct{    anime_outline_params_t outline;    anime_cel_params_t cel;    anime_color_params_t color;    anime_speed_lines_params_t speed_lines;    anime_tone_params_t tone;    anime_bloom_params_t bloom;    anime_panel_params_t panel;    float global_intensity; // Intensidade global (0.0 - 1.0)    gui_bool_t enable_3d;   // Habilitar efeitos 3D} anime_effect_params_t;// Estrutura de preset de estilo animetypedef struct{    const char *name;             // Nome do preset    anime_style_t style;          // Estilo de anime    anime_effect_params_t params; // Parâmetros do efeito    gui_shader_type_t shaders[8]; // Shaders a serem aplicados (em ordem)    size_t shader_count;          // Número de shaders} anime_preset_t;// Sistema de efeitos animetypedef struct{    anime_preset_t *presets;            // Lista de presets    size_t preset_count;                // Número de presets    anime_preset_t current_preset;      // Preset ativo    SDL_Texture *buffer_texture;        // Buffer de renderização    SDL_Texture *depth_texture;         // Buffer de profundidade (para 3D)    gui_shader_system_t *shader_system; // Sistema de shaders    gui_bool_t initialized;             // Flag de inicialização    gui_bool_t is_3d_mode;              // Modo 3D ativo} anime_effect_system_t;// Funções de inicializaçãogui_result_t anime_effects_init(anime_effect_system_t *system, gui_shader_system_t *shaders);void anime_effects_shutdown(anime_effect_system_t *system);// Funções de gerenciamento de presetsgui_result_t anime_effects_add_preset(anime_effect_system_t *system, const anime_preset_t *preset);gui_result_t anime_effects_load_preset(anime_effect_system_t *system, const char *name);gui_result_t anime_effects_set_style(anime_effect_system_t *system, anime_style_t style);gui_result_t anime_effects_customize(anime_effect_system_t *system, anime_effect_params_t params);// Presets padrãoanime_preset_t anime_preset_default(void);anime_preset_t anime_preset_modern(void);anime_preset_t anime_preset_classic(void);anime_preset_t anime_preset_shonen(void);anime_preset_t anime_preset_shojo(void);anime_preset_t anime_preset_seinen(void);anime_preset_t anime_preset_chibi(void);anime_preset_t anime_preset_cyberpunk(void);anime_preset_t anime_preset_watercolor(void);// Funções de aplicação de efeitogui_result_t anime_effects_begin_frame(anime_effect_system_t *system, SDL_Texture *target);gui_result_t anime_effects_apply(anime_effect_system_t *system,                                 SDL_Texture *source,                                 SDL_Texture *target,                                 SDL_Texture *depth_buffer);gui_result_t anime_effects_end_frame(anime_effect_system_t *system);// Funções específicas para cada efeitogui_result_t anime_effect_apply_cel_shading(anime_effect_system_t *system,                                            SDL_Texture *source,                                            SDL_Texture *target,                                            SDL_Texture *depth_buffer,                                            const anime_cel_params_t *params);gui_result_t anime_effect_apply_outline(anime_effect_system_t *system,                                        SDL_Texture *source,                                        SDL_Texture *target,                                        SDL_Texture *depth_buffer,                                        const anime_outline_params_t *params);gui_result_t anime_effect_apply_color_quantize(anime_effect_system_t *system,                                               SDL_Texture *source,                                               SDL_Texture *target,                                               const anime_color_params_t *params);gui_result_t anime_effect_apply_speed_lines(anime_effect_system_t *system,                                            SDL_Texture *source,                                            SDL_Texture *target,                                            const anime_speed_lines_params_t *params);gui_result_t anime_effect_apply_tone_mapping(anime_effect_system_t *system,                                             SDL_Texture *source,                                             SDL_Texture *target,                                             const anime_tone_params_t *params);gui_result_t anime_effect_apply_bloom_stylized(anime_effect_system_t *system,                                               SDL_Texture *source,                                               SDL_Texture *target,                                               const anime_bloom_params_t *params);gui_result_t anime_effect_apply_comic_panel(anime_effect_system_t *system,                                            SDL_Texture *source,                                            SDL_Texture *target,                                            const anime_panel_params_t *params);// Gerenciamento de presets específicos para jogosgui_result_t anime_effects_save_game_preset(const char *rom_path, const anime_preset_t *preset);gui_result_t anime_effects_load_game_preset(anime_effect_system_t *system, const char *rom_path);// Funções auxiliares para transição SDL2->SDL3#if defined(SDL_MAJOR_VERSION) && SDL_MAJOR_VERSION >= 3typedef SDL_FTexture SDL_Texture;#define SDL_CreateTexture SDL_CreateTextureWithProperties#define SDL_DestroyTexture SDL_DestroyTexture#endif#endif // GUI_ANIME_EFFECTS_H