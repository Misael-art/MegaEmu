#include <stdint.h>#ifndef GUI_ADVANCED_WIDGETS_H#define GUI_ADVANCED_WIDGETS_H#ifdef __cplusplusextern "C" {#endif#include "widgets.h"#include "texture_manager.h"// Barra de progresso circulartypedef struct{    gui_widget_t base;    float progress;    float radius;    gui_color_t progress_color;    gui_color_t background_color;    gui_bool_t show_text;} gui_circular_progress_t;// Gráfico de linhatypedef struct{    gui_widget_t base;    float *data;    size_t data_count;    float min_value;    float max_value;    gui_color_t line_color;    gui_color_t fill_color;    gui_bool_t show_grid;    gui_bool_t show_labels;} gui_line_graph_t;// Menu em árvoretypedef struct gui_tree_node{    char *text;    struct gui_tree_node **children;    size_t child_count;    gui_bool_t expanded;    void *user_data;} gui_tree_node_t;typedef struct{    gui_widget_t base;    gui_tree_node_t *root;    gui_color_t node_color;    gui_color_t selected_color;    int32_t indent_width;    gui_tree_node_t *selected_node;    void (*on_node_selected)(struct gui_widget *widget, gui_tree_node_t *node);} gui_tree_menu_t;// Visualizador de imagemtypedef struct{    gui_widget_t base;    gui_texture_t *texture;    float zoom;    gui_point_t pan;    gui_bool_t dragging;    gui_point_t drag_start;} gui_image_viewer_t;// Terminal virtualtypedef struct{    gui_widget_t base;    char **lines;    size_t line_count;    size_t max_lines;    size_t cursor_x;    size_t cursor_y;    gui_color_t text_color;    gui_color_t background_color;    gui_font_t *font;} gui_terminal_t;// Funções de criaçãogui_circular_progress_t *gui_circular_progress_create(gui_rect_t bounds, float radius);gui_line_graph_t *gui_line_graph_create(gui_rect_t bounds);gui_tree_menu_t *gui_tree_menu_create(gui_rect_t bounds);gui_image_viewer_t *gui_image_viewer_create(gui_rect_t bounds);gui_terminal_t *gui_terminal_create(gui_rect_t bounds, size_t max_lines);// Funções específicas para barra de progresso circularvoid gui_circular_progress_set_progress(gui_circular_progress_t *progress, float value);void gui_circular_progress_set_colors(gui_circular_progress_t *progress,                                      gui_color_t progress_color,                                      gui_color_t background_color);// Funções específicas para gráfico de linhavoid gui_line_graph_set_data(gui_line_graph_t *graph, float *data, size_t count);void gui_line_graph_set_range(gui_line_graph_t *graph, float min, float max);void gui_line_graph_enable_grid(gui_line_graph_t *graph, gui_bool_t enable);// Funções específicas para menu em árvoregui_tree_node_t *gui_tree_node_create(const char *text);void gui_tree_node_add_child(gui_tree_node_t *parent, gui_tree_node_t *child);void gui_tree_node_remove_child(gui_tree_node_t *parent, gui_tree_node_t *child);void gui_tree_menu_expand_node(gui_tree_menu_t *menu, gui_tree_node_t *node);void gui_tree_menu_collapse_node(gui_tree_menu_t *menu, gui_tree_node_t *node);// Funções específicas para visualizador de imagemvoid gui_image_viewer_set_image(gui_image_viewer_t *viewer, gui_texture_t *texture);void gui_image_viewer_set_zoom(gui_image_viewer_t *viewer, float zoom);void gui_image_viewer_reset_view(gui_image_viewer_t *viewer);// Funções específicas para terminal virtualvoid gui_terminal_print(gui_terminal_t *terminal, const char *text);void gui_terminal_clear(gui_terminal_t *terminal);void gui_terminal_set_cursor(gui_terminal_t *terminal, size_t x, size_t y);void gui_terminal_scroll(gui_terminal_t *terminal, int32_t lines);#endif // GUI_ADVANCED_WIDGETS_H