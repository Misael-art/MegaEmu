#include <stdint.h>#ifndef GUI_RETRO_EFFECTS_H#define GUI_RETRO_EFFECTS_H#ifdef __cplusplusextern "C" {#endif#include "gui_types.h"#include "shaders.h"// Tipos de efeitos retrotypedef enum{    RETRO_EFFECT_NONE = 0,    RETRO_EFFECT_PIXEL_PERFECT, // Escala pixel-perfect    RETRO_EFFECT_CRT,           // Efeito de TV CRT    RETRO_EFFECT_LCD,           // Efeito de LCD antigo    RETRO_EFFECT_DITHERING,     // Dithering adaptativo    RETRO_EFFECT_COLOR_GRADING, // Correção de cores    RETRO_EFFECT_SCANLINES,     // Linhas de varredura    RETRO_EFFECT_BLOOM          // Bloom estilizado} retro_effect_type_t;// Modos de escalatypedef enum{    RETRO_SCALE_AUTO = 0,    // Escala automática    RETRO_SCALE_INTEGER,     // Escala por números inteiros    RETRO_SCALE_ASPECT_4_3,  // Forçar 4:3    RETRO_SCALE_ASPECT_16_9, // Forçar 16:9    RETRO_SCALE_STRETCH      // Esticar para tela cheia} retro_scale_mode_t;// Tipos de ditheringtypedef enum{    RETRO_DITHER_NONE = 0,    RETRO_DITHER_ORDERED,   // Dithering ordenado    RETRO_DITHER_FLOYD,     // Floyd-Steinberg    RETRO_DITHER_BAYER,     // Bayer matrix    RETRO_DITHER_BLUE_NOISE // Blue noise} retro_dither_type_t;// Configurações de escalatypedef struct{    retro_scale_mode_t mode; // Modo de escala    float scale_factor;      // Fator de escala (para modo AUTO)    gui_bool_t letterbox;    // Usar letterboxing    gui_bool_t integer_only; // Apenas escalas inteiras    float sharpness;         // Nitidez (0.0 - 1.0)} retro_scale_params_t;// Configurações de CRTtypedef struct{    float curvature;          // Curvatura da tela (0.0 - 1.0)    float scanline_intensity; // Intensidade das scanlines (0.0 - 1.0)    float mask_intensity;     // Intensidade da máscara (0.0 - 1.0)    float bleed;              // Sangramento de cores (0.0 - 1.0)    float brightness;         // Brilho (0.0 - 2.0)    float contrast;           // Contraste (0.0 - 2.0)    float saturation;         // Saturação (0.0 - 2.0)    float vignette;           // Vinheta (0.0 - 1.0)    gui_bool_t phosphor;      // Efeito de fósforo} retro_crt_params_t;// Configurações de ditheringtypedef struct{    retro_dither_type_t type; // Tipo de dithering    float strength;           // Intensidade (0.0 - 1.0)    int32_t pattern_size;         // Tamanho do padrão (2-16)    float threshold;          // Limiar (0.0 - 1.0)    gui_bool_t color_dither;  // Dithering colorido} retro_dither_params_t;// Configurações de cortypedef struct{    int32_t color_depth;          // Profundidade de cor (1-32)    float gamma;              // Correção gamma (0.1 - 4.0)    gui_color_t palette[256]; // Paleta de cores    int32_t palette_size;         // Tamanho da paleta    gui_bool_t use_lut;       // Usar LUT    const char *lut_path;     // Caminho para arquivo LUT} retro_color_params_t;// Configurações de bloomtypedef struct{    float intensity;  // Intensidade (0.0 - 1.0)    float threshold;  // Limiar (0.0 - 1.0)    float radius;     // Raio (1.0 - 20.0)    gui_color_t tint; // Cor do bloom} retro_bloom_params_t;// Parâmetros globaistypedef struct{    retro_scale_params_t scale;    retro_crt_params_t crt;    retro_dither_params_t dither;    retro_color_params_t color;    retro_bloom_params_t bloom;    float global_intensity; // Intensidade global (0.0 - 1.0)} retro_effect_params_t;// Sistema de efeitos retrotypedef struct{    retro_effect_params_t params;    SDL_Texture *buffer_texture;    SDL_Texture *lut_texture;    gui_shader_system_t *shader_system;    gui_bool_t initialized;    int32_t source_width;    int32_t source_height;    int32_t target_width;    int32_t target_height;} retro_effect_system_t;// Funções de inicializaçãogui_result_t retro_effects_init(retro_effect_system_t *system,                                gui_shader_system_t *shaders,                                int32_t source_width,                                int32_t source_height);void retro_effects_shutdown(retro_effect_system_t *system);// Funções de configuraçãogui_result_t retro_effects_set_target_size(retro_effect_system_t *system,                                           int32_t width,                                           int32_t height);gui_result_t retro_effects_set_params(retro_effect_system_t *system,                                      const retro_effect_params_t *params);gui_result_t retro_effects_load_lut(retro_effect_system_t *system,                                    const char *lut_path);// Funções de renderizaçãogui_result_t retro_effects_begin_frame(retro_effect_system_t *system,                                       SDL_Texture *target);gui_result_t retro_effects_apply(retro_effect_system_t *system,                                 SDL_Texture *source,                                 SDL_Texture *target);gui_result_t retro_effects_end_frame(retro_effect_system_t *system);// Funções auxiliaresgui_result_t retro_effects_calculate_viewport(retro_effect_system_t *system,                                              SDL_Rect *viewport);gui_result_t retro_effects_generate_palette(retro_effect_system_t *system,                                            int32_t num_colors);// Funções de efeitos específicosgui_result_t retro_effect_apply_pixel_perfect(retro_effect_system_t *system,                                              SDL_Texture *source,                                              SDL_Texture *target,                                              const retro_scale_params_t *params);gui_result_t retro_effect_apply_crt(retro_effect_system_t *system,                                    SDL_Texture *source,                                    SDL_Texture *target,                                    const retro_crt_params_t *params);gui_result_t retro_effect_apply_dithering(retro_effect_system_t *system,                                          SDL_Texture *source,                                          SDL_Texture *target,                                          const retro_dither_params_t *params);gui_result_t retro_effect_apply_color_grading(retro_effect_system_t *system,                                              SDL_Texture *source,                                              SDL_Texture *target,                                              const retro_color_params_t *params);gui_result_t retro_effect_apply_bloom(retro_effect_system_t *system,                                      SDL_Texture *source,                                      SDL_Texture *target,                                      const retro_bloom_params_t *params);// Funções auxiliares para transição SDL2->SDL3#if defined(SDL_MAJOR_VERSION) && SDL_MAJOR_VERSION >= 3typedef SDL_FTexture SDL_Texture;#define SDL_CreateTexture SDL_CreateTextureWithProperties#define SDL_DestroyTexture SDL_DestroyTexture#endif#endif // GUI_RETRO_EFFECTS_H