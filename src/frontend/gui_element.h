#ifndef GUI_ELEMENT_H#define GUI_ELEMENT_H#include "gui_types.h"// #include <stdint.h>// #include <stdbool.h>// #include <SDL2/SDL.h>// #ifdef USE_SDL2_TTF// #include <SDL2/SDL_ttf.h>// #endif// Estrutura estendida de elemento para implementação internatypedef struct gui_element_extended_s{    // Campos adicionais para implementação interna    char name[32];    gui_color_t color;    struct gui_element_s *parent;    struct gui_element_s **children_ptr;    size_t num_children;    size_t max_children;    gui_element_property_t *properties_ptr;    size_t num_properties;    size_t max_properties;    void (*render)(gui_element_s *element);    void (*update)(gui_element_s *element);    bool (*handle_event)(gui_element_s *element, const gui_event_t *event);    void (*destroy)(gui_element_s *element);} gui_element_extended_t;/** * @brief Cria um novo elemento GUI * @param type Tipo do elemento * @param element Ponteiro para armazenar o elemento criado * @return Código de erro GUI */gui_error_t gui_element_create(gui_element_type_t type, gui_element_s **element);/** * @brief Destroi um elemento GUI e libera seus recursos * @param element Elemento a ser destruído */void gui_error_t gui_element_destroy(gui_element_s *element);/** * @brief Adiciona um novo elemento GUI como filho de outro elemento GUI * @param parent Elemento pai * @param child Elemento filho * @return Código de erro GUI */gui_error_t gui_element_add_child(gui_element_s *parent, gui_element_s *child);/** * @brief Remove um elemento filho de um elemento pai * @param parent Elemento pai * @param child Elemento filho * @return Código de erro GUI */gui_error_t gui_element_remove_child(gui_element_s *parent, gui_element_s *child);/** * @brief Define o texto de um elemento GUI * @param element Elemento GUI * @param text Texto a ser definido * @return Código de erro GUI */gui_error_t gui_element_set_text(gui_element_s *element, const char *text);/** * @brief Define a visibilidade de um elemento GUI * @param element Elemento GUI * @param visible Flag de visibilidade (true para visível, false para invisível) * @return Código de erro GUI */gui_error_t gui_element_set_visible(gui_element_s *element, bool visible);/** * @brief Define se o elemento GUI está habilitado ou não * @param element Elemento GUI * @param enabled Flag de habilitado (true para habilitado, false para desabilitado) * @return Código de erro GUI */gui_error_t gui_element_set_enabled(gui_element_s *element, bool enabled);/** * @brief Define a posição do elemento GUI * @param element Elemento GUI * @param x Posição X * @param y Posição Y * @return Código de erro GUI */gui_error_t gui_element_set_position(gui_element_s *element, int x, int y);/** * @brief Define o tamanho do elemento GUI * @param element Elemento GUI * @param width Largura do elemento * @param height Altura do elemento * @return Código de erro GUI */gui_error_t gui_element_set_size(gui_element_s *element, int width, int height);/** * @brief Define os limites do elemento GUI (posição e tamanho) * @param element Elemento GUI * @param x Posição X * @param y Posição Y * @param width Largura do elemento * @param height Altura do elemento * @return Código de erro GUI */gui_error_t gui_element_set_bounds(gui_element_s *element, int x, int y, int width, int height);/** * @brief Obtém os limites do elemento GUI * @param element Elemento GUI * @return Limites do elemento GUI */gui_rect_t gui_element_get_bounds(gui_element_s *element);/** * @brief Atualiza o elemento GUI * @param element Elemento GUI * @param delta_time Tempo decorrido desde a última atualização * @return Código de erro GUI */gui_error_t gui_element_update(gui_element_s *element, float delta_time);/** * @brief Renderiza o elemento GUI * @param element Elemento GUI * @param renderer Renderizador SDL * @return Código de erro GUI */gui_error_t gui_element_render(gui_element_s *element, SDL_Renderer *renderer);/** * @brief Processa eventos para o elemento GUI * @param element Elemento GUI * @param event Evento a ser processado * @return Código de erro GUI */gui_error_t gui_element_process_event(gui_element_s *element, gui_event_t *event);// Property functions/** * @brief Define uma propriedade inteira para o elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param value Valor inteiro da propriedade * @return Código de erro GUI */gui_error_t gui_element_set_property_int(gui_element_s *element, const char *name, int value);/** * @brief Define uma propriedade float para o elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param value Valor float da propriedade * @return Código de erro GUI */gui_error_t gui_element_set_property_float(gui_element_s *element, const char *name, float value);/** * @brief Define uma propriedade booleana para o elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param value Valor booleano da propriedade * @return Código de erro GUI */gui_error_t gui_element_set_property_bool(gui_element_s *element, const char *name, bool value);/** * @brief Define uma propriedade string para o elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param value Valor string da propriedade * @return Código de erro GUI */gui_error_t gui_element_set_property_string(gui_element_s *element, const char *name, const char *value);/** * @brief Define uma propriedade de cor para o elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param value Valor cor da propriedade * @return Código de erro GUI */gui_error_t gui_element_set_property_color(gui_element_s *element, const char *name, gui_color_t value);/** * @brief Define uma propriedade ponteiro para o elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param value Valor ponteiro da propriedade * @return Código de erro GUI */gui_error_t gui_element_set_property_pointer(gui_element_s *element, const char *name, void *value);/** * @brief Obtém o valor de uma propriedade inteira do elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param default_value Valor padrão caso a propriedade não seja encontrada * @return Valor inteiro da propriedade */int gui_element_get_property_int(gui_element_s *element, const char *name, int default_value);/** * @brief Obtém o valor de uma propriedade float do elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param default_value Valor padrão caso a propriedade não seja encontrada * @return Valor float da propriedade */float gui_element_get_property_float(gui_element_s *element, const char *name, float default_value);/** * @brief Obtém o valor de uma propriedade booleana do elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param default_value Valor padrão caso a propriedade não seja encontrada * @return Valor booleana da propriedade */bool gui_element_get_property_bool(gui_element_s *element, const char *name, bool default_value);/** * @brief Obtém o valor de uma propriedade string do elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param default_value Valor padrão caso a propriedade não seja encontrada * @return Valor string da propriedade */const char *gui_element_get_property_string(gui_element_s *element, const char *name, const char *default_value);/** * @brief Obtém o valor de uma propriedade cor do elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param default_value Valor padrão caso a propriedade não seja encontrada * @return Valor cor da propriedade */gui_color_t gui_element_get_property_color(gui_element_s *element, const char *name, gui_color_t default_value);/** * @brief Obtém o valor de uma propriedade ponteiro do elemento GUI * @param element Elemento GUI * @param name Nome da propriedade * @param default_value Valor padrão caso a propriedade não seja encontrada * @return Valor ponteiro da propriedade */void *gui_element_get_property_pointer(gui_element_s *element, const char *name, void *default_value);#endif // GUI_ELEMENT_H