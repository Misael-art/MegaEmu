#ifndef GUI_TYPES_H#define GUI_TYPES_H#include <stdint.h>#include <stdbool.h>#include <SDL2/SDL.h>#ifdef USE_SDL2_TTF#include <SDL2/SDL_ttf.h>#endiftypedef int32_t gui_element_id_t;#define GUI_MAX_TEXT 256#define GUI_MAX_CHILDREN 16#define GUI_MAX_PROPERTIES 8typedef struct gui_element_s gui_element_s;struct gui_element_s{    gui_element_id_t id;    gui_element_type_t type;    gui_rect_t rect;    gui_element_state_t state;    char text[GUI_MAX_TEXT];    uint32_t child_count;    gui_element_id_t children[GUI_MAX_CHILDREN];    uint32_t property_count;    gui_element_property_t properties[GUI_MAX_PROPERTIES];    void (*on_click)(gui_element_s *element);    void (*on_hover)(gui_element_s *element);    void (*on_leave)(gui_element_s *element);};typedef enum gui_element_type_e{    GUI_ELEMENT_NONE = 0,    GUI_ELEMENT_BUTTON,    GUI_ELEMENT_LABEL,    GUI_ELEMENT_TEXTBOX,    GUI_ELEMENT_CONTAINER,    GUI_ELEMENT_CUSTOM} gui_element_type_t;typedef struct gui_element_state_s{    bool focused;    bool hovered;    bool pressed;    bool visible;    bool enabled;} gui_element_state_t;typedef struct gui_element_property_s{    union    {        int32_t i;        float f;        bool b;        void *p;    } value;    char name[32];} gui_element_property_t;typedef struct gui_rect_s{    int x;    int y;    int w;    int h;} gui_rect_t;typedef struct gui_color_s{    uint8_t r;    uint8_t g;    uint8_t b;    uint8_t a;} gui_color_t;typedef enum gui_error_e{    GUI_OK = 0,    GUI_ERROR_INVALID_ARGUMENT,    GUI_ERROR_NULL_POINTER,    GUI_ERROR_OUT_OF_MEMORY,    GUI_ERROR_NOT_FOUND,    GUI_ERROR_ALREADY_EXISTS,    GUI_ERROR_INVALID_STATE,    GUI_ERROR_INVALID_OPERATION} gui_error_t;// Tipos de eventos da GUItypedef enum gui_event_type_e{    GUI_EVENT_NONE = 0,    GUI_EVENT_MOUSE_MOVE,    GUI_EVENT_MOUSE_DOWN,    GUI_EVENT_MOUSE_UP,    GUI_EVENT_KEY_DOWN,    GUI_EVENT_KEY_UP,    GUI_EVENT_CLICK,    GUI_EVENT_WINDOW_RESIZE,    GUI_EVENT_QUIT} gui_event_type_t;// Estrutura para eventos do mousetypedef struct gui_mouse_event_s{    int x;    int y;    uint8_t button;    bool pressed;} gui_mouse_event_t;// Estrutura para eventos de tecladotypedef struct gui_key_event_s{    SDL_Keycode key;    uint16_t mod;    bool pressed;} gui_key_event_t;// Estrutura para eventos de janelatypedef struct gui_window_event_s{    int width;    int height;} gui_window_event_t;// Uni√£o para dados de eventostypedef union gui_event_data_u{    gui_mouse_event_t mouse;    gui_key_event_t key;    gui_window_event_t window;} gui_event_data_t;// Estrutura principal de eventotypedef struct gui_event_s{    gui_event_type_t type;    gui_event_data_t data;} gui_event_t;// Tipo de callback para eventostypedef void (*gui_event_callback_fn)(gui_element_id_t element_id, const gui_event_t *event, void *user_data);// Estrutura para callbacks de eventostypedef struct gui_callback_s{    gui_element_id_t element_id;    gui_event_type_t type;    gui_event_callback_fn callback;    void *user_data;} gui_callback_t;#endif // GUI_TYPES_H