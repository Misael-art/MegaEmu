/** * @file gui_manager_cpp_bridge.cpp * @brief Implementação da interface C++ para o gerenciador de GUI */#include "frontend/gui_manager_cpp_bridge.h"#include "frontend/gui_manager.h"#include <SDL2/SDL.h>// Variáveis globaisstatic SDL_Window *g_window = nullptr;static SDL_Renderer *g_renderer = nullptr;static bool g_running = false;bool gui_manager_init(void){    if (SDL_Init(SDL_INIT_VIDEO) < 0)    {        return false;    }    g_running = true;    return true;}void gui_manager_shutdown(void){    if (g_renderer)    {        SDL_DestroyRenderer(g_renderer);        g_renderer = nullptr;    }    if (g_window)    {        SDL_DestroyWindow(g_window);        g_window = nullptr;    }    SDL_Quit();    g_running = false;}SDL_Window *gui_manager_create_window(const char *title, int width, int height){    g_window = SDL_CreateWindow(        title,        SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,        width, height,        SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);    if (g_window)    {        g_renderer = SDL_CreateRenderer(g_window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);    }    return g_window;}SDL_Renderer *gui_manager_get_renderer(void){    return g_renderer;}void gui_manager_set_window_size(int width, int height){    if (g_window)    {        SDL_SetWindowSize(g_window, width, height);    }}void gui_manager_get_window_size(int *width, int *height){    if (g_window)    {        SDL_GetWindowSize(g_window, width, height);    }    else    {        *width = 0;        *height = 0;    }}bool gui_manager_process_events(void){    SDL_Event event;    while (SDL_PollEvent(&event))    {        gui_manager_handle_event(&event);        if (event.type == SDL_QUIT)        {            g_running = false;            return false;        }    }    return true;}void gui_manager_handle_event(SDL_Event *event){    // Converter evento SDL para evento GUI    gui_event_t gui_event = {0};    switch (event->type)    {    case SDL_MOUSEMOTION:        gui_event.type = GUI_EVENT_MOUSE_MOVE;        gui_event.data.mouse.x = event->motion.x;        gui_event.data.mouse.y = event->motion.y;        break;    case SDL_MOUSEBUTTONDOWN:    case SDL_MOUSEBUTTONUP:        gui_event.type = (event->type == SDL_MOUSEBUTTONDOWN) ? GUI_EVENT_MOUSE_DOWN : GUI_EVENT_MOUSE_UP;        gui_event.data.mouse.x = event->button.x;        gui_event.data.mouse.y = event->button.y;        gui_event.data.mouse.button = event->button.button;        break;    case SDL_KEYDOWN:    case SDL_KEYUP:        gui_event.type = (event->type == SDL_KEYDOWN) ? GUI_EVENT_KEY_DOWN : GUI_EVENT_KEY_UP;        gui_event.data.key.scancode = event->key.keysym.scancode;        gui_event.data.key.keycode = event->key.keysym.sym;        gui_event.data.key.mod = event->key.keysym.mod;        break;    case SDL_WINDOWEVENT:        if (event->window.event == SDL_WINDOWEVENT_RESIZED)        {            gui_event.type = GUI_EVENT_WINDOW_RESIZE;            gui_event.data.window.width = event->window.data1;            gui_event.data.window.height = event->window.data2;        }        break;    }}void gui_manager_begin_frame(void){    if (g_renderer)    {        SDL_SetRenderDrawColor(g_renderer, 0, 0, 0, 255);        SDL_RenderClear(g_renderer);    }}void gui_manager_end_frame(void){    if (g_renderer)    {        SDL_RenderPresent(g_renderer);    }}void gui_manager_render(void){    if (g_renderer)    {        gui_manager_begin_frame();        // Renderização específica da GUI aqui        gui_manager_end_frame();    }}void gui_manager_set_running(bool running){    g_running = running;}bool gui_manager_is_running(void){    return g_running;}