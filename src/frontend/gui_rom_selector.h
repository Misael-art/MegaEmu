/** * @file gui_rom_selector.h * @brief Interface gráfica para seleção de ROMs */#ifndef GUI_ROM_SELECTOR_H#define GUI_ROM_SELECTOR_H#include <stdbool.h>#include <stdint.h>#include <time.h>#include <SDL2/SDL.h>#ifdef USE_SDL2_TTF#include <SDL2/SDL_ttf.h>#endif#include "gui/gui_types.h"#include "gui/gui_common.h"#include "console_types.h"#include "gui_element.h"#define ROM_SELECTOR_MAX_NAME 256#define ROM_SELECTOR_MAX_PATH 1024#define ROM_SELECTOR_MAX_ROMS 1000#define ROM_SELECTOR_MAX_EXTENSIONS 10#define MAX_ROM_PATH 260#define MAX_ROM_NAME 64#define MAX_ROMS_PER_PAGE 20// Estrutura para armazenar informações de ROMstypedef struct rom_info_s{    char path[ROM_SELECTOR_MAX_PATH];    char name[ROM_SELECTOR_MAX_NAME];    char extension[8];    uint32_t size;    bool favorite;    bool recently_played;    time_t last_played;} rom_info_t;// Estrutura para armazenar ROMs de um console específicotypedef struct console_roms_s{    console_type_t type;    char name[ROM_SELECTOR_MAX_NAME];    char rom_dir[ROM_SELECTOR_MAX_PATH];    rom_info_t roms[ROM_SELECTOR_MAX_ROMS];    uint32_t rom_count;} console_roms_t;// Estrutura para informações específicas do console no seletortypedef struct console_selector_info_s{    char name[32];    char extensions[ROM_SELECTOR_MAX_EXTENSIONS][8];    int num_extensions;    char rom_dir[256];} console_selector_info_t;// Estrutura principal do seletor de ROMstypedef struct gui_rom_selector_s{    // Propriedades básicas    bool visible;    bool enabled;    gui_rect_t bounds;    gui_color_t background_color;    gui_color_t text_color;    gui_color_t selection_color;    gui_color_t border_color;    // Informações de consoles e ROMs    console_selector_info_t console_info[CONSOLE_COUNT];    uint32_t console_count;    console_type_t current_console_type;    rom_info_t roms[ROM_SELECTOR_MAX_ROMS];    uint32_t num_roms;    int current_console;    int scroll_position;    // Estado de seleção    int32_t selected_index;    char selected_rom_path[ROM_SELECTOR_MAX_PATH];    // Callbacks    void (*callback)(const char *rom_path, console_type_t console_type, void *user_data);    void *user_data;    void (*on_rom_selected)(const char *rom_path, console_type_t console_type);    void (*on_cancel)(void);    // Recursos de renderização#ifdef USE_SDL2_TTF    TTF_Font *font;#endif    SDL_Renderer *renderer;} gui_rom_selector_t;// Funções de inicialização e finalizaçãogui_error_t gui_rom_selector_init(gui_rom_selector_t *selector);gui_error_t gui_rom_selector_init_console(gui_rom_selector_t *selector, console_type_t console);gui_error_t gui_rom_selector_scan_roms(gui_rom_selector_t *selector);void gui_rom_selector_render(gui_rom_selector_t *selector, SDL_Renderer *renderer);bool gui_rom_selector_handle_event(gui_rom_selector_t *selector, SDL_Event *event);void gui_rom_selector_set_viewport(gui_rom_selector_t *selector, gui_rect_t viewport);void gui_rom_selector_set_callback(gui_rom_selector_t *selector, void (*callback)(const char *rom_path));// Funções de manipulação de ROMsgui_error_t gui_rom_selector_add_rom(gui_rom_selector_t *selector, const char *path, const char *name);void gui_rom_selector_clear_roms(gui_rom_selector_t *selector);const rom_info_t *gui_rom_selector_get_selected_rom(const gui_rom_selector_t *selector);// Funções de interfacevoid gui_rom_selector_show(gui_rom_selector_t *selector);void gui_rom_selector_hide(gui_rom_selector_t *selector);void gui_rom_selector_set_position(gui_rom_selector_t *selector, int x, int y);void gui_rom_selector_set_size(gui_rom_selector_t *selector, int width, int height);bool gui_rom_selector_is_visible(const gui_rom_selector_t *selector);// Funções de configuraçãovoid gui_rom_selector_set_rom_dir(gui_rom_selector_t *selector, const char *dir);// Funções de favoritos e históricovoid gui_rom_selector_refresh(gui_rom_selector_t *selector);void gui_rom_selector_add_favorite(gui_rom_selector_t *selector, const char *path);void gui_rom_selector_remove_favorite(gui_rom_selector_t *selector, const char *path);void gui_rom_selector_clear_favorites(gui_rom_selector_t *selector);void gui_rom_selector_update_last_played(gui_rom_selector_t *selector, const char *path);// Funções de seleção de consolegui_error_t gui_rom_selector_set_console(gui_rom_selector_t *selector, int console_index);int gui_rom_selector_get_current_console(const gui_rom_selector_t *selector);// Obtém o nome de um console pelo seu tipoconst char *gui_rom_selector_get_console_name(console_type_t console_type);#endif /* GUI_ROM_SELECTOR_H */