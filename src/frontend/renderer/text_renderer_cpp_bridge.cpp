/** * @file text_renderer_cpp_bridge.cpp * @brief Implementação da ponte entre C++ e C para o sistema de renderização de texto */#include "text_renderer.h"#include <string>extern "C"{    // Declaração da função text_renderer_render do arquivo text_renderer.c    bool text_renderer_render(const char *text, int x, int y, text_style_t style);    bool text_renderer_measure(const char *text, text_style_t style, int *width, int *height);}/** * @brief Renderiza texto na tela com estilo personalizado * * @param text Texto a ser renderizado * @param x Posição X * @param y Posição Y * @param color Cor do texto * @param size Tamanho do texto * @return true se a renderização foi bem-sucedida, false caso contrário */bool text_renderer_draw(const char *text, int x, int y, SDL_Color color, text_size_t size){    if (!text)    {        return false;    }    text_style_t style = text_style_default();    style.color = color;    style.size = size;    return text_renderer_render(text, x, y, style);}/** * @brief Renderiza texto na tela com alinhamento * * @param text Texto a ser renderizado * @param x Posição X * @param y Posição Y * @param color Cor do texto * @param size Tamanho do texto * @param align Alinhamento do texto * @return true se a renderização foi bem-sucedida, false caso contrário */bool text_renderer_draw_aligned(const char *text, int x, int y, SDL_Color color, text_size_t size, text_align_t align){    if (!text)    {        return false;    }    text_style_t style = text_style_default();    style.color = color;    style.size = size;    style.alignment = align;    return text_renderer_render(text, x, y, style);}/** * @brief Renderiza texto na tela com estilo completo * * @param text Texto a ser renderizado * @param x Posição X * @param y Posição Y * @param color Cor do texto * @param size Tamanho do texto * @param align Alinhamento do texto * @param style_flags Flags de estilo do texto * @return true se a renderização foi bem-sucedida, false caso contrário */bool text_renderer_draw_styled(const char *text, int x, int y, SDL_Color color, text_size_t size, text_align_t align, text_style_flags_t style_flags){    if (!text)    {        return false;    }    text_style_t style = text_style_default();    style.color = color;    style.size = size;    style.alignment = align;    style.flags = style_flags;    return text_renderer_render(text, x, y, style);}/** * @brief Mede o tamanho do texto renderizado * * @param text Texto a ser medido * @param size Tamanho do texto * @param width Ponteiro para armazenar a largura * @param height Ponteiro para armazenar a altura * @return true se a medição foi bem-sucedida, false caso contrário */bool text_renderer_measure_size(const char *text, text_size_t size, int *width, int *height){    if (!text)    {        return false;    }    text_style_t style = text_style_default();    style.size = size;    return text_renderer_measure(text, style, width, height);}