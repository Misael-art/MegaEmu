import numpy as npfrom concurrent.futures import ThreadPoolExecutorfrom .logging_config import SpriteViewerLoggerclass SpriteOptimizer:    def __init__(self):        self.logger = SpriteViewerLogger()        self.thread_pool = ThreadPoolExecutor(max_workers=4)            def optimize_sprite_load(self, sprite_data):        """Otimiza carregamento de sprites usando NumPy"""        try:            # Converte para array NumPy para operações mais rápidas            return np.asarray(sprite_data, dtype=np.uint8)        except Exception as e:            self.logger.log_sprite_operation("ERROR", f"Optimization failed: {e}")            return sprite_data                def batch_process_sprites(self, sprite_list, operation):        """Processa múltiplos sprites em paralelo"""        try:            futures = []            for sprite in sprite_list:                future = self.thread_pool.submit(operation, sprite)                futures.append(future)                        return [f.result() for f in futures]        except Exception as e:            self.logger.log_sprite_operation(                "ERROR",                 f"Batch processing failed: {e}"            )            return []