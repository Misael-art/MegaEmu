import tkinter as tkfrom tkinter import ttk, filedialogimport loggingfrom pathlib import Pathfrom PIL import Image, ImageTkclass SpriteViewerGUI:    def __init__(self, root):        self.root = root        self.root.title("Mega_Emu Sprite Viewer")        self.setup_logging()        self.init_ui()    def setup_logging(self):        """Configura logging para resources/reports"""        log_path = Path("resources/reports/sprite_viewer.log")        log_path.parent.mkdir(parents=True, exist_ok=True)                logging.basicConfig(            filename=str(log_path),            level=logging.DEBUG,            format='%(asctime)s - %(levelname)s - %(message)s'        )    def init_ui(self):        """Inicializa a interface do usuário"""        self.create_menu()        self.create_toolbar()        self.create_main_view()        self.create_status_bar()    def create_menu(self):        """Cria a barra de menu"""        menubar = tk.Menu(self.root)        self.root.config(menu=menubar)        file_menu = tk.Menu(menubar, tearoff=0)        menubar.add_cascade(label="File", menu=file_menu)        file_menu.add_command(label="Open ROM...", command=self.open_rom)        file_menu.add_command(label="Export Sprite...", command=self.export_sprite)        file_menu.add_separator()        file_menu.add_command(label="Exit", command=self.root.quit)        view_menu = tk.Menu(menubar, tearoff=0)        menubar.add_cascade(label="View", menu=view_menu)        view_menu.add_command(label="Zoom In", command=self.zoom_in)        view_menu.add_command(label="Zoom Out", command=self.zoom_out)        view_menu.add_command(label="Reset Zoom", command=self.reset_zoom)    def create_toolbar(self):        """Cria a barra de ferramentas"""        toolbar = ttk.Frame(self.root)        toolbar.pack(side=tk.TOP, fill=tk.X)        ttk.Button(toolbar, text="Open", command=self.open_rom).pack(side=tk.LEFT, padx=2)        ttk.Button(toolbar, text="Export", command=self.export_sprite).pack(side=tk.LEFT, padx=2)                self.platform_var = tk.StringVar(value="NES")        platform_select = ttk.Combobox(toolbar, textvariable=self.platform_var)        platform_select['values'] = ('NES', 'SNES', 'Mega Drive')        platform_select.pack(side=tk.LEFT, padx=2)        platform_select.bind('<<ComboboxSelected>>', self.on_platform_change)    def create_main_view(self):        """Cria a área principal de visualização"""        main_frame = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)        main_frame.pack(fill=tk.BOTH, expand=True)        # Painel esquerdo - Lista de sprites        left_frame = ttk.Frame(main_frame)        main_frame.add(left_frame)        self.sprite_list = ttk.Treeview(left_frame)        self.sprite_list.pack(fill=tk.BOTH, expand=True)        self.sprite_list.bind('<<TreeviewSelect>>', self.on_sprite_select)        # Painel direito - Visualização do sprite        right_frame = ttk.Frame(main_frame)        main_frame.add(right_frame)        self.canvas = tk.Canvas(right_frame, bg='white')        self.canvas.pack(fill=tk.BOTH, expand=True)    def create_status_bar(self):        """Cria a barra de status"""        self.status_var = tk.StringVar()        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN)        status_bar.pack(side=tk.BOTTOM, fill=tk.X)        self.status_var.set("Ready")    def open_rom(self):        """Abre um arquivo ROM"""        try:            filename = filedialog.askopenfilename(                filetypes=[                    ("NES ROMs", "*.nes"),                    ("SNES ROMs", "*.sfc;*.smc"),                    ("Mega Drive ROMs", "*.md;*.bin"),                    ("All files", "*.*")                ]            )            if filename:                logging.info(f"Opening ROM: {filename}")                self.status_var.set(f"Loaded: {Path(filename).name}")                self.load_sprites(filename)        except Exception as e:            logging.error(f"Error opening ROM: {str(e)}")            self.status_var.set("Error opening ROM")    def load_sprites(self, rom_path):        """Carrega sprites do ROM"""        # Implementação específica para cada plataforma        platform = self.platform_var.get()        logging.info(f"Loading sprites for platform: {platform}")        # TODO: Implementar carregamento específico por plataforma    def export_sprite(self):        """Exporta o sprite selecionado"""        try:            filename = filedialog.asksaveasfilename(                defaultextension=".png",                filetypes=[("PNG files", "*.png"), ("All files", "*.*")]            )            if filename:                logging.info(f"Exporting sprite to: {filename}")                # TODO: Implementar exportação do sprite                self.status_var.set(f"Exported: {Path(filename).name}")        except Exception as e:            logging.error(f"Error exporting sprite: {str(e)}")            self.status_var.set("Error exporting sprite")    def zoom_in(self):        """Aumenta o zoom"""        logging.debug("Zoom in")        # TODO: Implementar zoom    def zoom_out(self):        """Diminui o zoom"""        logging.debug("Zoom out")        # TODO: Implementar zoom    def reset_zoom(self):        """Reseta o zoom"""        logging.debug("Reset zoom")        # TODO: Implementar reset do zoom    def on_platform_change(self, event):        """Manipula mudança de plataforma"""        platform = self.platform_var.get()        logging.info(f"Platform changed to: {platform}")        self.status_var.set(f"Platform: {platform}")    def on_sprite_select(self, event):        """Manipula seleção de sprite"""        selection = self.sprite_list.selection()        if selection:            item = self.sprite_list.item(selection[0])            logging.info(f"Selected sprite: {item['text']}")            self.status_var.set(f"Selected: {item['text']}")