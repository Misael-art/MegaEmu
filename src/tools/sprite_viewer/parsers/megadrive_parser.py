class MegaDriveParser:    def __init__(self):        self.vram_data = None        self.cram_data = None  # Color RAM            def decode_color(self, color_value):        """Decodifica cor do formato MD (0000 BBB0 GGG0 RRR0) para RGB"""        r = ((color_value >> 1) & 0x07) * 36  # 3-bit para 8-bit        g = ((color_value >> 5) & 0x07) * 36        b = ((color_value >> 9) & 0x07) * 36        return (r, g, b)    def load_sprite_data(self, vram_path, cram_path=None):        """Carrega dados de sprite e paleta"""        try:            with open(vram_path, 'rb') as f:                self.vram_data = f.read()                        if cram_path:                with open(cram_path, 'rb') as f:                    self.cram_data = f.read()            return True        except Exception as e:            logging.error(f"Erro ao carregar dados: {e}")            return False    def get_sprite(self, pattern_index, palette_index=0):        """Extrai sprite 8x8 ou 16x16 com informações de cor"""        if not self.vram_data:            return None        sprite_size = 32  # 8x8 sprites = 32 bytes        offset = pattern_index * sprite_size                if offset + sprite_size > len(self.vram_data):            return None        sprite_data = np.zeros((8, 8), dtype=np.uint8)                # Processa 4 bits por pixel        for y in range(8):            for x in range(8):                byte_offset = offset + (y * 4) + (x // 2)                pixel_byte = self.vram_data[byte_offset]                                if x % 2 == 0:                    pixel_value = (pixel_byte >> 4) & 0x0F                else:                    pixel_value = pixel_byte & 0x0F                                    sprite_data[y][x] = pixel_value + (palette_index * 16)        return sprite_data