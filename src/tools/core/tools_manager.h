/** * @file tools_manager.h * @brief Gerenciador de ferramentas de desenvolvimento * * Este arquivo define a interface para o gerenciador de ferramentas * de desenvolvimento do emulador Mega_Emu. */#ifndef EMU_TOOLS_MANAGER_H#define EMU_TOOLS_MANAGER_H#include <stdint.h>#include "../../core/core.h"#ifdef __cplusplusextern "C" {#endif/* Forward declarations */struct emu_platform_instance;struct emu_tool;typedef struct emu_tool emu_tool;/** * @brief Configuração do gerenciador de ferramentas */typedef struct {    int32_t window_width;               /**< Largura da janela principal */    int32_t window_height;              /**< Altura da janela principal */    const char* window_title;       /**< Título da janela principal */    bool auto_update;               /**< Flag para atualização automática */    int32_t update_interval_ms;         /**< Intervalo de atualização em ms */    void* userdata;                 /**< Dados específicos do usuário */} emu_tools_manager_config_t;/** * @brief Callback para eventos das ferramentas */typedef void (*emu_tool_event_callback_t)(emu_tool* tool, int32_t event_type, void* event_data, void* userdata);/** * @brief Inicializa o gerenciador de ferramentas * * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_init(void);/** * @brief Finaliza o gerenciador de ferramentas */void emu_tools_manager_shutdown(void);/** * @brief Configura o gerenciador de ferramentas * * @param config Configuração a ser aplicada * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_configure(const emu_tools_manager_config_t* config);/** * @brief Registra uma ferramenta no gerenciador * * @param tool Ferramenta a ser registrada * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_register_tool(emu_tool* tool);/** * @brief Remove uma ferramenta do gerenciador * * @param tool Ferramenta a ser removida * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_unregister_tool(emu_tool* tool);/** * @brief Associa uma plataforma ao gerenciador de ferramentas * * @param platform Plataforma a ser associada * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_attach_platform(struct emu_platform_instance* platform);/** * @brief Desassocia a plataforma do gerenciador de ferramentas * * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_detach_platform(void);/** * @brief Executa uma atualização do gerenciador de ferramentas * * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_update(void);/** * @brief Renderiza a interface do gerenciador de ferramentas * * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_render(void);/** * @brief Processa eventos do gerenciador de ferramentas * * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_process_events(void);/** * @brief Define o callback para eventos das ferramentas * * @param callback Função de callback * @param userdata Dados do usuário * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_set_event_callback(emu_tool_event_callback_t callback, void* userdata);/** * @brief Mostra ou esconde uma ferramenta específica * * @param tool_id ID da ferramenta * @param visible Flag de visibilidade * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_set_tool_visible(const char* tool_id, int32_t visible);/** * @brief Verifica se uma ferramenta específica está visível * * @param tool_id ID da ferramenta * @return 1 se visível, 0 se não visível, código de erro negativo caso contrário */int32_t emu_tools_manager_is_tool_visible(const char* tool_id);/** * @brief Obtém o número de ferramentas registradas * * @return Número de ferramentas ou código de erro negativo */int32_t emu_tools_manager_get_tool_count(void);/** * @brief Obtém informações sobre uma ferramenta específica * * @param index Índice da ferramenta * @param tool_id Buffer para armazenar o ID da ferramenta * @param tool_name Buffer para armazenar o nome da ferramenta * @param id_size Tamanho do buffer tool_id * @param name_size Tamanho do buffer tool_name * @return 0 em caso de sucesso, código de erro caso contrário */int32_t emu_tools_manager_get_tool_info(int32_t index, char* tool_id, char* tool_name, int32_t id_size, int32_t name_size);#ifdef __cplusplus}#endif#endif /* EMU_TOOLS_MANAGER_H */