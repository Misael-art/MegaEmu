/** * @file node_params.h * @brief Definições de parâmetros para o sistema de nós do IDE */#ifndef EMU_NODE_PARAMS_H#define EMU_NODE_PARAMS_H#include <stdint.h>#include <stdbool.h>/** * @brief Tipos de valores para os parâmetros */typedef enum{    EMU_PARAM_TYPE_INVALID = 0,    EMU_PARAM_TYPE_INTEGER,    EMU_PARAM_TYPE_FLOAT,    EMU_PARAM_TYPE_BOOLEAN,    EMU_PARAM_TYPE_STRING,    EMU_PARAM_TYPE_COLOR,    EMU_PARAM_TYPE_VECTOR2,    EMU_PARAM_TYPE_VECTOR3,    EMU_PARAM_TYPE_VECTOR4,    EMU_PARAM_TYPE_RECT,    EMU_PARAM_TYPE_ENUM,    EMU_PARAM_TYPE_BITFIELD,    EMU_PARAM_TYPE_RESOURCE,    EMU_PARAM_TYPE_COUNT} emu_param_type_t;/** * @brief União para armazenar valores de diferentes tipos */typedef union{    int32_t int_value;    float float_value;    bool bool_value;    char string_value[64];    uint32_t color_value;    struct    {        float x, y;    } vector2;    struct    {        float x, y, z;    } vector3;    struct    {        float x, y, z, w;    } vector4;    struct    {        float x, y, width, height;    } rect;    uint32_t enum_value;    uint32_t bitfield_value;    uint32_t resource_id;} emu_param_value_t;/** * @brief Definição de um parâmetro individual */typedef struct{    char name[32];    emu_param_type_t type;    emu_param_value_t value;    emu_param_value_t min_value;    emu_param_value_t max_value;    bool is_required;    bool is_readonly;} emu_node_param_t;/** * @brief Conjunto de parâmetros para um nó */typedef struct{    emu_node_param_t params[16]; // Suporte para até 16 parâmetros por nó    uint8_t param_count;} emu_node_params_t;#endif // EMU_NODE_PARAMS_H