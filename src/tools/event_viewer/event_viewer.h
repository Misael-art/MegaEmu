/** * @file event_viewer.h * @brief Interface para visualização de eventos do sistema */#ifndef EMU_EVENT_VIEWER_H#define EMU_EVENT_VIEWER_H#include <stdint.h>#include <stdbool.h>#include "event_types.h"#include "event_filter.h"#include "event_stats.h"/** * @brief Configurações para o visualizador de eventos */typedef struct{    uint32_t window_size_ms; // Tamanho da janela de visualização em milissegundos    bool auto_scroll;        // Se deve rolar automaticamente para novos eventos    bool filter_enabled;     // Se o filtro está habilitado    uint32_t filter_mask;    // Máscara de filtro de tipos de eventos} EventViewerConfig;/** * @brief Inicializa o visualizador de eventos * * @param config Configurações para o visualizador */void event_viewer_init(EventViewerConfig *config);/** * @brief Atualiza o estado do visualizador */void event_viewer_update(void);/** * @brief Renderiza a interface do visualizador */void event_viewer_render(void);/** * @brief Finaliza o visualizador e libera recursos */void event_viewer_shutdown(void);/** * @brief Adiciona um evento ao visualizador * * @param event Evento a ser adicionado */void event_viewer_add_event(const EmuNodeEvent *event);/** * @brief Define um novo filtro para o visualizador * * @param filter Filtro a ser aplicado */void event_viewer_set_filter(const EventFilter *filter);#endif // EMU_EVENT_VIEWER_H