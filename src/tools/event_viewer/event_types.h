/** * @file event_types.h * @brief Definições de tipos para o sistema de eventos */#ifndef EMU_EVENT_TYPES_H#define EMU_EVENT_TYPES_H#include <stdint.h>#include <stdbool.h>/** * @brief Tipos de eventos no sistema */typedef enum{    EMU_EVENT_NONE = 0,    EMU_EVENT_DEBUG,   // Evento de depuração    EMU_EVENT_INFO,    // Evento informativo    EMU_EVENT_WARNING, // Aviso    EMU_EVENT_ERROR,   // Erro    EMU_EVENT_SYSTEM,  // Evento do sistema    EMU_EVENT_MEMORY,  // Evento relacionado a memória    EMU_EVENT_CPU,     // Evento relacionado a CPU    EMU_EVENT_IO,      // Evento de I/O    EMU_EVENT_VIDEO,   // Evento de vídeo    EMU_EVENT_AUDIO,   // Evento de áudio    EMU_EVENT_INPUT,   // Evento de entrada de usuário    EMU_EVENT_NETWORK, // Evento de rede    EMU_EVENT_CUSTOM,  // Evento personalizado    EMU_EVENT_MAX      // Marca o número máximo de tipos de eventos} emu_event_type_t;/** * @brief Flags de eventos para filtragem */typedef enum{    EMU_EVENT_FLAG_NONE = 0,    EMU_EVENT_FLAG_IMPORTANT = (1 << 0),    EMU_EVENT_FLAG_TRANSIENT = (1 << 1),    EMU_EVENT_FLAG_REPEATING = (1 << 2),    EMU_EVENT_FLAG_USER = (1 << 3),    EMU_EVENT_FLAG_SYSTEM = (1 << 4),    EMU_EVENT_FLAG_ASYNC = (1 << 5),    EMU_EVENT_FLAG_BLOCKING = (1 << 6),    EMU_EVENT_FLAG_CUSTOM1 = (1 << 7),    EMU_EVENT_FLAG_CUSTOM2 = (1 << 8)} emu_event_flags_t;/** * @brief Estrutura de um evento no sistema */typedef struct{    uint32_t id;           // ID único do evento    emu_event_type_t type; // Tipo do evento    uint32_t flags;        // Flags do evento (combinação de emu_event_flags_t)    uint64_t timestamp;    // Momento em que o evento ocorreu    uint64_t duration;     // Duração do evento (se aplicável)    uint32_t source_id;    // ID da fonte do evento    char source_name[32];  // Nome da fonte do evento    char message[256];     // Mensagem descritiva    void *data;            // Dados adicionais (específicos do tipo)    size_t data_size;      // Tamanho dos dados adicionais} EmuNodeEvent;#endif // EMU_EVENT_TYPES_H