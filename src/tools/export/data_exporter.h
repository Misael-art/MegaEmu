#include <stdint.h>/** * @file data_exporter.h * @brief Interface para exportação de dados do emulador */#ifndef EMU_DATA_EXPORTER_H#define EMU_DATA_EXPORTER_H#include <stddef.h>#include <stdbool.h>// Definição dos tipos de dados para estatísticas e métricastypedef struct EventStats{    uint32_t event_count;    uint32_t event_types;    uint64_t total_duration;    uint64_t timestamp;} EventStats;typedef struct EventMetrics{    uint32_t event_id;    char name[64];    uint64_t duration;    uint64_t count;    float average_duration;    float min_duration;    float max_duration;} EventMetrics;typedef struct CPUProfile{    uint32_t thread_id;    char thread_name[64];    uint64_t total_cpu_time;    float cpu_usage_percent;    uint32_t context_switches;    uint32_t page_faults;} CPUProfile;/** * @brief Formatos suportados para exportação de dados */typedef enum{    EXPORT_FORMAT_CSV,    EXPORT_FORMAT_JSON,    EXPORT_FORMAT_XML,    EXPORT_FORMAT_BINARY} ExportFormat;/** * @brief Estrutura do exportador de dados */typedef struct{    ExportFormat format;    char *output_path;    bool compress;    void (*export_stats)(const EventStats *stats);    void (*export_metrics)(const EventMetrics *metrics, size_t count);    void (*export_profile)(const CPUProfile *profile);} DataExporter;/** * @brief Cria um novo exportador de dados no formato especificado * * @param format Formato de exportação * @return Ponteiro para o exportador criado ou NULL em caso de erro */DataExporter *data_exporter_create(ExportFormat format);/** * @brief Configura o caminho de saída para o exportador * * @param exporter Exportador a ser configurado * @param path Caminho para o arquivo de saída */void data_exporter_configure(DataExporter *exporter, const char *path);/** * @brief Libera recursos utilizados pelo exportador * * @param exporter Exportador a ser destruído */void data_exporter_destroy(DataExporter *exporter);#endif // EMU_DATA_EXPORTER_H