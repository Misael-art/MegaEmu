#include <stdint.h>/** * @file nes_cpu.hpp * @brief Definição da classe NESCPU para a CPU do NES em C++ * @author Mega_Emu Team * @version 1.0.0 * @date 2024-03-13 */#pragma once#include <cstdint>#include <functional>#include <memory>#include <string>// Compatibilidade com código Cextern "C"{#include "nes_cpu.h"}namespace MegaEmu{    namespace Platforms    {        namespace NES        {            /**             * @class NESCPU             * @brief Implementação C++ da Central Processing Unit (CPU) do NES (RP2A03)             *             * Esta classe encapsula a funcionalidade da CPU do NES e fornece             * uma interface mais orientada a objetos para interação com outros             * componentes do sistema.             */            class NESCPU            {            public:                /**                 * @brief Construtor da classe NESCPU                 * @param memory Ponteiro para o subsistema de memória                 */                NESCPU(void *memory);                /**                 * @brief Destrutor da classe NESCPU                 */                ~NESCPU();                /**                 * @brief Inicializa a CPU                 */                void initialize();                /**                 * @brief Reseta a CPU para seu estado inicial                 */                void reset();                /**                 * @brief Executa um ciclo da CPU                 */                void cycle();                /**                 * @brief Executa uma instrução completa                 * @return Número de ciclos consumidos                 */                int32_t step();                /**                 * @brief Dispara uma Non-Maskable Interrupt (NMI)                 */                void triggerNMI();                /**                 * @brief Dispara uma Interrupt Request (IRQ)                 */                void triggerIRQ();                /**                 * @brief Define callbacks para acesso à memória                 * @param readFunc Função para leitura de memória                 * @param writeFunc Função para escrita em memória                 * @param context Contexto para as funções                 */                void setMemoryCallbacks(                    nes_cpu_read_func_t readFunc,                    nes_cpu_write_func_t writeFunc,                    void *context);                /**                 * @brief Obtém o valor do registrador A (Acumulador)                 * @return Valor do registrador A                 */                uint8_t getRegisterA() const;                /**                 * @brief Obtém o valor do registrador X                 * @return Valor do registrador X                 */                uint8_t getRegisterX() const;                /**                 * @brief Obtém o valor do registrador Y                 * @return Valor do registrador Y                 */                uint8_t getRegisterY() const;                /**                 * @brief Obtém o valor do Stack Pointer                 * @return Valor do Stack Pointer                 */                uint8_t getStackPointer() const;                /**                 * @brief Obtém o valor do Program Counter                 * @return Valor do Program Counter                 */                uint16_t getProgramCounter() const;                /**                 * @brief Obtém o valor do registrador de status (flags)                 * @return Valor do registrador de status                 */                uint8_t getStatusRegister() const;                /**                 * @brief Obtém o número total de ciclos executados                 * @return Número de ciclos                 */                uint32_t getCycles() const;                /**                 * @brief Associa a CPU a um subsistema APU                 * @param apu Ponteiro para o APU                 */                void setAPU(void *apu);            private:                // Estrutura C original                nes_cpu_t *m_cpu;                // Flags para gerenciamento de estado                bool m_initialized;            };        } // namespace NES    } // namespace Platforms} // namespace MegaEmu