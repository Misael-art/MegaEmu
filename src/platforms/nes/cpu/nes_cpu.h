#ifndef NES_CPU_H#define NES_CPU_H#include <stdint.h>// Funções de callback para acesso à memóriatypedef uint8_t (*nes_cpu_read_func_t)(void *context, uint16_t address);typedef void (*nes_cpu_write_func_t)(void *context, uint16_t address, uint8_t value);// Estrutura do CPU do NES (RP2A03)typedef struct nes_cpu_t{    // Registradores    uint8_t a;   // Acumulador    uint8_t x;   // Índice X    uint8_t y;   // Índice Y    uint8_t s;   // Stack Pointer    uint8_t p;   // Status Register (flags)    uint16_t pc; // Program Counter    // Estado interno    uint32_t cycles;       // Ciclos totais executados    uint8_t irq_pending;   // IRQ pendente    uint8_t nmi_pending;   // NMI pendente    uint8_t reset_pending; // Reset pendente    // Ponteiros para componentes    struct nes_memory_t *memory; // Subsistema de memória    struct nes_apu_t *apu;       // APU    // Funções de acesso à memória    nes_cpu_read_func_t read_mem;   // Função para leitura de memória    nes_cpu_write_func_t write_mem; // Função para escrita em memória    void *context;                  // Contexto para as funções de memória} nes_cpu_t;// Funções de controle do CPUnes_cpu_t *nes_cpu_init(struct nes_memory_t *memory);void nes_cpu_trigger_nmi(nes_cpu_t *cpu);void nes_cpu_trigger_irq(nes_cpu_t *cpu);void nes_cpu_reset(nes_cpu_t *cpu);void nes_cpu_shutdown(nes_cpu_t *cpu);int32_t nes_cpu_step(nes_cpu_t *cpu);void nes_cpu_cycle(nes_cpu_t *cpu);// Funções de configuraçãovoid nes_cpu_set_memory_callbacks(nes_cpu_t *cpu,                                  nes_cpu_read_func_t read_func,                                  nes_cpu_write_func_t write_func,                                  void *context);#endif // NES_CPU_H