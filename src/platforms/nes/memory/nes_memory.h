/** * @file nes_memory.h * @brief Definições para o subsistema de memória do NES */#ifndef NES_MEMORY_H#define NES_MEMORY_H#include <stdint.h>#include "../../../core/core_types.h"#ifdef __cplusplusextern "C"{#endif#include <stdint.h>/** * @brief Constantes para mapeamento de memória do NES */#define NES_MEM_SIZE_RAM 0x0800        /**< Tamanho da RAM interna (2KB) */#define NES_MEM_SIZE_PPU_REG 0x0008    /**< Tamanho dos registradores da PPU */#define NES_MEM_SIZE_APU_IO_REG 0x0018 /**< Tamanho dos registradores da APU e I/O */#define NES_MEM_SIZE_CART 0xBFE0       /**< Tamanho do espaço do cartucho *//** * @brief Endereços base do mapeamento de memória */#define NES_MEM_ADDR_RAM 0x0000         /**< RAM interna: $0000-$07FF */#define NES_MEM_ADDR_RAM_MIRRORS 0x0800 /**< Espelhos da RAM: $0800-$1FFF */#define NES_MEM_ADDR_PPU_REG 0x2000     /**< Registradores da PPU: $2000-$2007 */#define NES_MEM_ADDR_PPU_MIRRORS 0x2008 /**< Espelhos dos registradores da PPU: $2008-$3FFF */#define NES_MEM_ADDR_APU_IO_REG 0x4000  /**< Registradores da APU e I/O: $4000-$4017 */#define NES_MEM_ADDR_TEST_MODE 0x4018   /**< Área de teste do CPU: $4018-$401F */#define NES_MEM_ADDR_CART 0x4020        /**< Espaço do cartucho: $4020-$FFFF *//** * @brief Registradores da PPU */#define NES_PPU_REG_PPUCTRL 0x2000   /**< Controle 1 da PPU */#define NES_PPU_REG_PPUMASK 0x2001   /**< Controle 2 da PPU (máscara) */#define NES_PPU_REG_PPUSTATUS 0x2002 /**< Status da PPU */#define NES_PPU_REG_OAMADDR 0x2003   /**< Endereço OAM (sprites) */#define NES_PPU_REG_OAMDATA 0x2004   /**< Dados OAM (sprites) */#define NES_PPU_REG_PPUSCROLL 0x2005 /**< Scroll da PPU */#define NES_PPU_REG_PPUADDR 0x2006   /**< Endereço da VRAM */#define NES_PPU_REG_PPUDATA 0x2007   /**< Dados da VRAM *//** * @brief Registradores de I/O */#define NES_IO_REG_OAMDMA 0x4014 /**< DMA OAM */#define NES_IO_REG_JOY1 0x4016   /**< Joystick 1 */#define NES_IO_REG_JOY2 0x4017   /**< Joystick 2 */    /**     * @brief Funções de callback para mapeamento de memória     */    typedef uint8_t (*nes_mem_read_func_t)(void *context, uint16_t address);    typedef void (*nes_mem_write_func_t)(void *context, uint16_t address, uint8_t value);    /**     * @brief Estrutura de um mapeamento de memória     */    typedef struct    {        uint16_t start_addr;             /**< Endereço inicial do mapeamento */        uint16_t end_addr;               /**< Endereço final do mapeamento */        nes_mem_read_func_t read_func;   /**< Função de leitura */        nes_mem_write_func_t write_func; /**< Função de escrita */        void *context;                   /**< Contexto para os callbacks */    } nes_memory_map_t;    /**     * @brief Estrutura principal do sistema de memória do NES     */    typedef struct    {        // RAM interna        uint8_t ram[NES_MEM_SIZE_RAM];        // Mapeamentos        nes_memory_map_t *mappings; /**< Array de mapeamentos de memória */        int32_t num_mappings;           /**< Número de mapeamentos ativos */        int32_t max_mappings;           /**< Tamanho máximo do array de mapeamentos */        // Ponteiros para componentes        void *ppu;       /**< Ponteiro para a PPU */        void *apu;       /**< Ponteiro para a APU */        void *input;     /**< Ponteiro para o subsistema de input */        void *cartridge; /**< Ponteiro para o cartucho */        // Estado do sistema        int32_t dma_in_progress;    /**< Flag indicando DMA em progresso */        int32_t dma_cycles_left;    /**< Ciclos restantes para DMA */        uint16_t dma_src_addr;  /**< Endereço fonte para DMA */        uint16_t dma_dest_addr; /**< Endereço destino para DMA */    } nes_memory_t;    /**     * @brief Inicializa o subsistema de memória     *     * @return nes_memory_t* Ponteiro para o subsistema de memória, ou NULL em caso de erro     */    nes_memory_t *nes_memory_init(void);    /**     * @brief Configura os componentes do sistema de memória     *     * @param memory Ponteiro para o subsistema de memória     * @param ppu Ponteiro para a PPU     * @param apu Ponteiro para a APU     * @param input Ponteiro para o subsistema de input     * @param cartridge Ponteiro para o cartucho     * @return int32_t 0 em caso de sucesso, código de erro caso contrário     */    int32_t nes_memory_set_components(nes_memory_t *memory, void *ppu, void *apu, void *input, void *cartridge);    /**     * @brief Finaliza e libera recursos do subsistema de memória     *     * @param memory Ponteiro para o subsistema de memória     */    void nes_memory_shutdown(nes_memory_t *memory);    /**     * @brief Reseta o subsistema de memória     *     * @param memory Ponteiro para o subsistema de memória     */    void nes_memory_reset(nes_memory_t *memory);    /**     * @brief Adiciona um mapeamento de memória     *     * @param memory Ponteiro para o subsistema de memória     * @param start_addr Endereço inicial do mapeamento     * @param end_addr Endereço final do mapeamento     * @param read_func Função de leitura     * @param write_func Função de escrita     * @param context Contexto para os callbacks     * @return int32_t 0 em caso de sucesso, código de erro em caso de falha     */    int32_t nes_memory_add_mapping(nes_memory_t *memory, uint16_t start_addr, uint16_t end_addr,                               nes_mem_read_func_t read_func, nes_mem_write_func_t write_func,                               void *context);    /**     * @brief Lê um uint8_t da memória     *     * @param memory Ponteiro para o subsistema de memória     * @param address Endereço para ler     * @return uint8_t Valor lido     */    uint8_t nes_memory_read(nes_memory_t *memory, uint16_t address);    /**     * @brief Escreve um uint8_t na memória     *     * @param memory Ponteiro para o subsistema de memória     * @param address Endereço para escrever     * @param value Valor a escrever     */    void nes_memory_write(nes_memory_t *memory, uint16_t address, uint8_t value);    /**     * @brief Lê uma palavra (16 bits) da memória (little endian)     *     * @param memory Ponteiro para o subsistema de memória     * @param address Endereço para ler     * @return uint16_t Valor lido     */    uint16_t nes_memory_read_word(nes_memory_t *memory, uint16_t address);    /**     * @brief Escreve uma palavra (16 bits) na memória (little endian)     *     * @param memory Ponteiro para o subsistema de memória     * @param address Endereço para escrever     * @param value Valor a escrever     */    void nes_memory_write_word(nes_memory_t *memory, uint16_t address, uint16_t value);    /**     * @brief Inicia uma operação de DMA     *     * @param memory Ponteiro para o subsistema de memória     * @param page O número da página (uint8_t alto do endereço) para a fonte do DMA     * @return int32_t Número de ciclos que a operação levará     */    int32_t nes_memory_start_dma(nes_memory_t *memory, uint8_t page);    /**     * @brief Executa um ciclo de DMA     *     * @param memory Ponteiro para o subsistema de memória     * @return int32_t 1 se o DMA foi concluído, 0 se ainda há ciclos restantes, -1 em caso de erro     */    int32_t nes_memory_run_dma(nes_memory_t *memory);    /**     * @brief Verifica se um DMA está em progresso     *     * @param memory Ponteiro para o subsistema de memória     * @return int32_t 1 se um DMA está em progresso, 0 caso contrário     */    int32_t nes_memory_is_dma_active(nes_memory_t *memory);    /**     * @brief Lê um uint8_t da memória (função específica para o CPU)     *     * @param memory Ponteiro para o subsistema de memória     * @param address Endereço para ler     * @return uint8_t Valor lido     */    uint8_t nes_memory_cpu_read(nes_memory_t *memory, uint16_t address);    /**     * @brief Escreve um uint8_t na memória (função específica para o CPU)     *     * @param memory Ponteiro para o subsistema de memória     * @param address Endereço para escrever     * @param value Valor a escrever     */    void nes_memory_cpu_write(nes_memory_t *memory, uint16_t address, uint8_t value);#ifdef __cplusplus}#endif#endif /* NES_MEMORY_H */