#include <stdint.h>/** * @file nes_apu.hpp * @brief Definição da classe NESAPU para a Audio Processing Unit do NES em C++ * @author Mega_Emu Team * @version 1.0.0 * @date 2024-03-13 */#pragma once#include <cstdint>#include <memory>#include <vector>// Compatibilidade com código Cextern "C"{#include "nes_apu.h"}namespace MegaEmu{    namespace Platforms    {        namespace NES        {            /**             * @class NESAPU             * @brief Implementação C++ da Audio Processing Unit (APU) do NES             *             * Esta classe encapsula a funcionalidade do APU do NES e fornece             * uma interface mais orientada a objetos para interação com outros             * componentes do sistema.             */            class NESAPU            {            public:                /**                 * @brief Construtor da classe NESAPU                 * @param cpu Ponteiro para a CPU                 * @param memory Ponteiro para a memória                 * @param sampleRate Taxa de amostragem desejada                 */                NESAPU(void *cpu, void *memory, int32_t sampleRate = NES_APU_SAMPLE_RATE);                /**                 * @brief Destrutor da classe NESAPU                 */                ~NESAPU();                /**                 * @brief Inicializa o APU                 */                void initialize();                /**                 * @brief Reseta o APU para seu estado inicial                 */                void reset();                /**                 * @brief Executa ciclos do APU                 * @param cycles Número de ciclos a executar                 */                void cycle(int32_t cycles);                /**                 * @brief Atualiza o APU                 * @param cycles Número de ciclos desde a última atualização                 */                void update(int32_t cycles);                /**                 * @brief Executa um passo do APU                 */                void step();                /**                 * @brief Executa um quadro completo do APU                 */                void runFrame();                /**                 * @brief Gera amostras de áudio                 * @param buffer Buffer para armazenar as amostras                 * @param numSamples Número de amostras a gerar                 * @return Número de amostras geradas                 */                int32_t generateSamples(int16_t *buffer, int32_t numSamples);                /**                 * @brief Obtém amostras do buffer interno                 * @param buffer Buffer para armazenar as amostras                 * @param numSamples Número de amostras a obter                 * @return Número de amostras obtidas                 */                int32_t getSamples(int16_t *buffer, int32_t numSamples);                /**                 * @brief Lê um registrador do APU                 * @param address Endereço do registrador                 * @return Valor lido                 */                uint8_t readRegister(uint16_t address) const;                /**                 * @brief Escreve em um registrador do APU                 * @param address Endereço do registrador                 * @param value Valor a ser escrito                 */                void writeRegister(uint16_t address, uint8_t value);                /**                 * @brief Verifica se ocorreu uma IRQ                 * @return Valor diferente de zero se ocorreu uma IRQ                 */                int32_t irqOccurred() const;                /**                 * @brief Verifica se há uma IRQ pendente                 * @return true se há uma IRQ pendente                 */                bool irqPending() const;                /**                 * @brief Reconhece uma IRQ                 */                void acknowledgeIRQ();                /**                 * @brief Limpa o buffer de áudio                 */                void clearBuffer();                /**                 * @brief Obtém a taxa de amostragem atual                 * @return Taxa de amostragem em Hz                 */                int32_t getSampleRate() const;                /**                 * @brief Define a taxa de amostragem                 * @param sampleRate Nova taxa de amostragem em Hz                 */                void setSampleRate(int32_t sampleRate);            private:                // Estrutura C original                nes_apu_t *m_apu;                // Flags para gerenciamento de estado                bool m_initialized;            };        } // namespace NES    } // namespace Platforms} // namespace MegaEmu