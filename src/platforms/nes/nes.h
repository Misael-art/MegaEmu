/** * @file nes.h * @brief Definições principais para a plataforma NES/Famicom */#ifndef NES_H#define NES_H#include "core/core_types.h"#include "utils/enhanced_log.h"#include <stdint.h>#include "platforms/nes/cpu/rp2a03.h"#include "platforms/nes/ppu/nes_ppu.h"#include "platforms/nes/apu/nes_apu.h"#include "platforms/nes/memory/nes_memory.h"#include "platforms/nes/input/nes_input.h"#include "platforms/nes/cartridge/nes_cartridge.h"#include "platforms/nes/cpu/nes_cpu.h"#ifdef __cplusplusextern "C"{#endif/** * @brief Categorias de log específicas para o NES */#define NES_LOG_CAT_MAIN EMU_LOG_CAT_PLATFORM#define NES_LOG_CAT_CPU EMU_LOG_CAT_CPU#define NES_LOG_CAT_PPU EMU_LOG_CAT_VIDEO#define NES_LOG_CAT_APU EMU_LOG_CAT_AUDIO#define NES_LOG_CAT_MEMORY EMU_LOG_CAT_MEMORY#define NES_LOG_CAT_INPUT EMU_LOG_CAT_INPUT#define NES_LOG_CAT_CARTRIDGE NES_LOG_CAT_MAIN/** * @brief Códigos de erro para a plataforma NES */#define NES_ERROR_NONE 0                 /**< Sem erro */#define NES_ERROR_INVALID_PARAMETER -1   /**< Parâmetro inválido */#define NES_ERROR_MEMORY_ALLOCATION -2   /**< Erro de alocação de memória */#define NES_ERROR_FILE_NOT_FOUND -3      /**< Arquivo não encontrado */#define NES_ERROR_INVALID_ROM -4         /**< ROM inválida */#define NES_ERROR_UNSUPPORTED_MAPPER -5  /**< Mapper não suportado */#define NES_ERROR_INITIALIZATION -6      /**< Erro de inicialização */#define NES_ERROR_ALREADY_INITIALIZED -7 /**< Sistema já inicializado */#define NES_ERROR_NOT_INITIALIZED -8     /**< Sistema não inicializado */#define NES_ERROR_ROM_LOAD -9            /**< Erro ao carregar ROM */#define NES_ERROR_NOT_RUNNING 10         /**< Estado não em execução */    /**     * @brief Tipos de mapper suportados     */    typedef enum    {        NES_MAPPER_NROM = 0,  /**< Mapper 0: NROM (sem mapping) */        NES_MAPPER_MMC1 = 1,  /**< Mapper 1: MMC1 */        NES_MAPPER_UNROM = 2, /**< Mapper 2: UNROM */        NES_MAPPER_CNROM = 3, /**< Mapper 3: CNROM */        NES_MAPPER_MMC3 = 4,  /**< Mapper 4: MMC3 */        // Outros mappers serão adicionados conforme necessário    } nes_mapper_type_t;    /**     * @brief Configuração do emulador NES     */    typedef struct    {        int32_t audio_enabled;     /**< 1 se o áudio está habilitado, 0 caso contrário */        int32_t audio_sample_rate; /**< Taxa de amostragem do áudio (Hz) */        int32_t video_scale;       /**< Fator de escala para o vídeo (1-4) */        int32_t vsync_enabled;     /**< 1 se o vsync está habilitado, 0 caso contrário */        int32_t fullscreen;        /**< 1 se em tela cheia, 0 caso contrário */        int32_t filter_type;       /**< Tipo de filtro de vídeo */        int32_t region;            /**< Região do console (NTSC/PAL) */        int32_t ntsc_mode;         /**< 1 se modo NTSC, 0 se PAL */        int32_t log_level;         /**< Nível de log (EMU_LOG_LEVEL_*) */        const char *rom_path;      /**< Caminho para o arquivo ROM */    } nes_config_t;    /**     * @brief Estado do sistema NES     */    typedef struct    {        // Informações gerais        int32_t initialized;     /**< 1 se inicializado, 0 caso contrário */        int32_t running;         /**< 1 se em execução, 0 caso contrário */        int32_t frame_count;     /**< Contador de frames */        uint64_t cycles_count;   /**< Contador de ciclos */        nes_config_t config;     /**< Configuração atual */        nes_rom_info_t rom_info; /**< Informações da ROM carregada */        // Componentes do sistema        nes_cpu_t *cpu;             /**< Estado da CPU */        nes_ppu_t *ppu;             /**< Estado da PPU */        nes_apu_t *apu;             /**< Estado da APU */        nes_memory_t *memory;       /**< Estado da memória */        nes_input_t *input;         /**< Estado dos controladores */        nes_cartridge_t *cartridge; /**< Estado do cartucho */    } nes_state_t;    /**     * @brief Estado global do sistema NES     * Declarado como externo para ser acessível por outros módulos     */    extern nes_state_t g_nes_state;    /**     * @brief Inicializa o sistema NES     *     * @param config Configuração inicial (pode ser NULL para usar padrões)     * @return int32_t Código de erro (0 para sucesso)     */    int32_t nes_init(const nes_config_t *config);    /**     * @brief Finaliza o sistema NES e libera recursos     */    void nes_shutdown(void);    /**     * @brief Reseta o sistema NES (similar a pressionar o botão RESET)     *     * @return int32_t Código de erro (0 para sucesso)     */    int32_t nes_reset(void);    /**     * @brief Carrega uma ROM no sistema NES     *     * @param rom_path Caminho para o arquivo ROM     * @return int32_t Código de erro (0 para sucesso)     */    int32_t nes_load_rom(const char *rom_path);    /**     * @brief Executa um único frame do sistema NES     *     * @param frame_buffer Buffer para receber dados do frame renderizado     * @param audio_buffer Buffer para receber dados de áudio     * @param audio_buffer_size Tamanho do buffer de áudio     * @return int32_t Código de erro (0 para sucesso)     */    int32_t nes_run_frame(uint32_t *frame_buffer, int16_t *audio_buffer, int32_t audio_buffer_size);    /**     * @brief Define o estado dos botões do controlador 1     *     * @param button_state Estado dos botões (bit 0: A, bit 1: B, etc.)     */    void nes_set_controller1(uint8_t button_state);    /**     * @brief Define o estado dos botões do controlador 2     *     * @param button_state Estado dos botões (bit 0: A, bit 1: B, etc.)     */    void nes_set_controller2(uint8_t button_state);    /**     * @brief Salva o estado atual do sistema NES     *     * @param state_path Caminho para o arquivo de estado     * @return int32_t Código de erro (0 para sucesso)     */    int32_t nes_save_state(const char *state_path);    /**     * @brief Carrega um estado salvo para o sistema NES     *     * @param state_path Caminho para o arquivo de estado     * @return int32_t Código de erro (0 para sucesso)     */    int32_t nes_load_state(const char *state_path);    /**     * @brief Obtém o estado atual do sistema NES     *     * @return nes_state_t* Ponteiro para o estado (não modificar diretamente)     */    const nes_state_t *nes_get_state(void);// Constantes de ciclos por frame#define NES_NTSC_CYCLES_PER_FRAME 29780#define NES_PAL_CYCLES_PER_FRAME 33247    // Declarações de funções de bridge para C++    extern void *nes_cpp_create(void);    extern void nes_cpp_destroy(void *instance);    extern int32_t nes_cpp_initialize(void *instance);    extern int32_t nes_cpp_load_rom(void *instance, const uint8_t *data, size_t size);    extern int32_t nes_cpp_run_frame(void *instance);    extern const uint32_t *nes_cpp_get_video_buffer(void *instance);    extern void nes_cpp_update_controller(void *instance, const void *controller_state, int32_t controller_index);    extern int32_t nes_cpp_save_state(void *instance, const char *filename);    extern int32_t nes_cpp_load_state(void *instance, const char *filename);#ifdef __cplusplus}#endif#endif /* NES_H */