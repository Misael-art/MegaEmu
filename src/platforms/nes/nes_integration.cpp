/** * @file nes_integration.cpp * @brief Implementação das funções de bridge entre C e C++ para o NES * @author Mega_Emu Team * @version 1.0.0 * @date 2024-03-13 */#include "nes_integration.hpp"#include "nes.hpp"#include "ppu/nes_ppu.hpp"#include "cpu/nes_cpu.hpp"#include "apu/nes_apu.hpp"#include "cartridge/nes_cartridge.hpp"#include <iostream>#include <cstring>#include <fstream>using namespace MegaEmu::Platforms;using namespace MegaEmu::Platforms::NES;// Funções de bridge declaradas em nes.hextern "C"{#include "nes.h"    /**     * @brief Cria uma instância C++ do NES     * @return Ponteiro para a instância criada     */    void *nes_cpp_create()    {        try        {            return new MegaEmu::Platforms::NES();        }        catch (const std::exception &e)        {            std::cerr << "Erro ao criar instância NES: " << e.what() << std::endl;            return nullptr;        }    }    /**     * @brief Destrói uma instância C++ do NES     * @param instance Ponteiro para a instância     */    void nes_cpp_destroy(void *instance)    {        if (instance)        {            try            {                delete static_cast<MegaEmu::Platforms::NES *>(instance);            }            catch (const std::exception &e)            {                std::cerr << "Erro ao destruir instância NES: " << e.what() << std::endl;            }        }    }    /**     * @brief Inicializa uma instância C++ do NES     * @param instance Ponteiro para a instância     * @return 1 se sucesso, 0 se falha     */    int nes_cpp_initialize(void *instance)    {        if (!instance)            return 0;        try        {            MegaEmu::Platforms::NES *nes = static_cast<MegaEmu::Platforms::NES *>(instance);            return nes->initialize() ? 1 : 0;        }        catch (const std::exception &e)        {            std::cerr << "Erro ao inicializar instância NES: " << e.what() << std::endl;            return 0;        }    }    /**     * @brief Carrega uma ROM em uma instância C++ do NES     * @param instance Ponteiro para a instância     * @param data Dados da ROM     * @param size Tamanho dos dados     * @return 1 se sucesso, 0 se falha     */    int nes_cpp_load_rom(void *instance, const uint8_t *data, size_t size)    {        if (!instance || !data || size == 0)            return 0;        try        {            MegaEmu::Platforms::NES *nes = static_cast<MegaEmu::Platforms::NES *>(instance);            // Criar arquivo temporário            std::string tempFilename = "temp_rom.nes";            std::ofstream tempFile(tempFilename, std::ios::binary);            if (!tempFile)            {                std::cerr << "Não foi possível criar arquivo temporário para ROM" << std::endl;                return 0;            }            tempFile.write(reinterpret_cast<const char *>(data), size);            tempFile.close();            // Carregar ROM            bool result = nes->loadROM(tempFilename);            // Remover arquivo temporário            std::remove(tempFilename.c_str());            return result ? 1 : 0;        }        catch (const std::exception &e)        {            std::cerr << "Erro ao carregar ROM: " << e.what() << std::endl;            return 0;        }    }    /**     * @brief Executa um quadro em uma instância C++ do NES     * @param instance Ponteiro para a instância     * @return 1 se sucesso, 0 se falha     */    int nes_cpp_run_frame(void *instance)    {        if (!instance)            return 0;        try        {            MegaEmu::Platforms::NES *nes = static_cast<MegaEmu::Platforms::NES *>(instance);            return nes->runFrame() ? 1 : 0;        }        catch (const std::exception &e)        {            std::cerr << "Erro ao executar quadro: " << e.what() << std::endl;            return 0;        }    }    /**     * @brief Obtém o buffer de vídeo de uma instância C++ do NES     * @param instance Ponteiro para a instância     * @return Ponteiro para o buffer de vídeo     */    const uint32_t *nes_cpp_get_video_buffer(void *instance)    {        if (!instance)            return nullptr;        try        {            MegaEmu::Platforms::NES *nes = static_cast<MegaEmu::Platforms::NES *>(instance);            return nes->getVideoBuffer();        }        catch (const std::exception &e)        {            std::cerr << "Erro ao obter buffer de vídeo: " << e.what() << std::endl;            return nullptr;        }    }    /**     * @brief Atualiza o estado do controle em uma instância C++ do NES     * @param instance Ponteiro para a instância     * @param controller_state Estado do controle     * @param controller_index Índice do controle (0 ou 1)     */    void nes_cpp_update_controller(void *instance, const void *controller_state, int controller_index)    {        if (!instance || !controller_state || controller_index < 0 || controller_index > 1)            return;        try        {            MegaEmu::Platforms::NES *nes = static_cast<MegaEmu::Platforms::NES *>(instance);            nes->updateControllerState(controller_index, *static_cast<const Core::ControllerState *>(controller_state));        }        catch (const std::exception &e)        {            std::cerr << "Erro ao atualizar estado do controle: " << e.what() << std::endl;        }    }    /**     * @brief Salva o estado de uma instância C++ do NES     * @param instance Ponteiro para a instância     * @param filename Nome do arquivo para salvar     * @return 1 se sucesso, 0 se falha     */    int nes_cpp_save_state(void *instance, const char *filename)    {        if (!instance || !filename)            return 0;        try        {            MegaEmu::Platforms::NES *nes = static_cast<MegaEmu::Platforms::NES *>(instance);            return nes->saveState(filename) ? 1 : 0;        }        catch (const std::exception &e)        {            std::cerr << "Erro ao salvar estado: " << e.what() << std::endl;            return 0;        }    }    /**     * @brief Carrega o estado de uma instância C++ do NES     * @param instance Ponteiro para a instância     * @param filename Nome do arquivo para carregar     * @return 1 se sucesso, 0 se falha     */    int nes_cpp_load_state(void *instance, const char *filename)    {        if (!instance || !filename)            return 0;        try        {            MegaEmu::Platforms::NES *nes = static_cast<MegaEmu::Platforms::NES *>(instance);            return nes->loadState(filename) ? 1 : 0;        }        catch (const std::exception &e)        {            std::cerr << "Erro ao carregar estado: " << e.what() << std::endl;            return 0;        }    }}