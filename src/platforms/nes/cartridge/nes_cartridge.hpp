#include <stdint.h>/** * @file nes_cartridge.hpp * @brief Definição da classe NESCartridge para o Cartridge do NES em C++ * @author Mega_Emu Team * @version 1.0.0 * @date 2024-03-13 */#pragma once#include <cstdint>#include <memory>#include <string>#include <vector>#include "../ppu/nes_ppu.hpp"// Compatibilidade com código Cextern "C"{#include "nes_cartridge.h"}namespace MegaEmu{    namespace Platforms    {        namespace NES        {            /**             * @enum MapperType             * @brief Tipos de mappers suportados             */            enum class MapperType            {                NROM = 0,    ///< Mapper 0: NROM (sem mapper)                MMC1 = 1,    ///< Mapper 1: MMC1                UNROM = 2,   ///< Mapper 2: UNROM                CNROM = 3,   ///< Mapper 3: CNROM                MMC3 = 4,    ///< Mapper 4: MMC3                MMC5 = 5,    ///< Mapper 5: MMC5                UNKNOWN = -1 ///< Mapper desconhecido ou não suportado            };            /**             * @struct ROMInfo             * @brief Informações sobre a ROM do NES             */            struct ROMInfo            {                int32_t mapperNumber; ///< Número do mapper                int32_t prgRomSize;   ///< Tamanho da PRG-ROM em bytes                int32_t chrRomSize;   ///< Tamanho da CHR-ROM em bytes                int32_t prgRamSize;   ///< Tamanho da PRG-RAM em bytes                bool hasBattery;  ///< Se tem bateria (SRAM persistente)                int32_t mapperType;   ///< Tipo do mapper                int32_t mirroring;    ///< Tipo de espelhamento                // Convertendo da estrutura C para a estrutura C++                static ROMInfo fromNESRomInfo(const nes_rom_info_t &info)                {                    ROMInfo result;                    result.mapperNumber = info.mapper_number;                    result.prgRomSize = info.prg_rom_size;                    result.chrRomSize = info.chr_rom_size;                    result.prgRamSize = info.prg_ram_size;                    result.hasBattery = (info.has_battery != 0);                    result.mapperType = info.mapper_type;                    result.mirroring = info.mirroring;                    return result;                }            };            /**             * @class IMapper             * @brief Interface para implementação de mappers do NES             */            class IMapper            {            public:                virtual ~IMapper() = default;                /**                 * @brief Inicializa o mapper                 * @param cartridge Ponteiro para o cartridge                 * @return true se inicializado com sucesso                 */                virtual bool initialize(void *cartridge) = 0;                /**                 * @brief Reset do mapper                 */                virtual void reset() = 0;                /**                 * @brief Lê um uint8_t do espaço de endereçamento da CPU                 * @param address Endereço                 * @return Valor lido                 */                virtual uint8_t cpuRead(uint16_t address) = 0;                /**                 * @brief Escreve um uint8_t no espaço de endereçamento da CPU                 * @param address Endereço                 * @param value Valor a ser escrito                 */                virtual void cpuWrite(uint16_t address, uint8_t value) = 0;                /**                 * @brief Lê um uint8_t do espaço de endereçamento da PPU                 * @param address Endereço                 * @return Valor lido                 */                virtual uint8_t chrRead(uint16_t address) = 0;                /**                 * @brief Escreve um uint8_t no espaço de endereçamento da PPU                 * @param address Endereço                 * @param value Valor a ser escrito                 */                virtual void chrWrite(uint16_t address, uint8_t value) = 0;                /**                 * @brief Notifica o mapper sobre uma nova scanline                 */                virtual void scanline() = 0;                /**                 * @brief Obtém o modo de espelhamento                 * @return Modo de espelhamento                 */                virtual MirrorMode getMirrorMode() = 0;            };            /**             * @class NESCartridge             * @brief Implementação C++ do Cartridge do NES             *             * Esta classe encapsula a funcionalidade do Cartridge do NES e fornece             * uma interface mais orientada a objetos para interação com outros             * componentes do sistema.             */            class NESCartridge            {            public:                /**                 * @brief Construtor da classe NESCartridge                 */                NESCartridge();                /**                 * @brief Destrutor da classe NESCartridge                 */                ~NESCartridge();                /**                 * @brief Carrega uma ROM do NES                 * @param romPath Caminho para o arquivo de ROM                 * @return true se o carregamento foi bem-sucedido                 */                bool loadROM(const std::string &romPath);                /**                 * @brief Obtém informações sobre a ROM                 * @return Estrutura com informações da ROM                 */                ROMInfo getInfo() const;                /**                 * @brief Reseta o estado do cartridge                 */                void reset();                /**                 * @brief Lê um uint8_t do espaço de endereçamento da CPU                 * @param address Endereço (0x4020-0xFFFF)                 * @return Valor lido                 */                uint8_t cpuRead(uint16_t address) const;                /**                 * @brief Escreve um uint8_t no espaço de endereçamento da CPU                 * @param address Endereço (0x4020-0xFFFF)                 * @param value Valor a ser escrito                 */                void cpuWrite(uint16_t address, uint8_t value);                /**                 * @brief Lê um uint8_t do espaço de endereçamento da PPU (CHR)                 * @param address Endereço (0x0000-0x1FFF)                 * @return Valor lido                 */                uint8_t chrRead(uint16_t address) const;                /**                 * @brief Escreve um uint8_t no espaço de endereçamento da PPU (CHR)                 * @param address Endereço (0x0000-0x1FFF)                 * @param value Valor a ser escrito                 */                void chrWrite(uint16_t address, uint8_t value);                /**                 * @brief Notifica o cartridge sobre uma nova scanline                 */                void scanline();                /**                 * @brief Salva o conteúdo da SRAM em um arquivo                 * @param savePath Caminho para o arquivo de salvamento                 * @return true se o salvamento foi bem-sucedido                 */                bool saveSRAM(const std::string &savePath);                /**                 * @brief Carrega o conteúdo da SRAM de um arquivo                 * @param savePath Caminho para o arquivo de salvamento                 * @return true se o carregamento foi bem-sucedido                 */                bool loadSRAM(const std::string &savePath);                /**                 * @brief Obtém o modo de espelhamento atual                 * @return Modo de espelhamento                 */                MirrorMode getMirrorMode() const;                /**                 * @brief Define a CPU para o cartridge                 * @param cpu Ponteiro para a CPU                 */                void setCPU(void *cpu);                /**                 * @brief Obtém o número do mapper                 * @return Número do mapper                 */                int32_t getMapperNumber() const;                /**                 * @brief Verifica se o cartridge tem bateria (SRAM persistente)                 * @return true se o cartridge tem bateria                 */                bool hasBattery() const;                /**                 * @brief Obtém o caminho do arquivo ROM                 * @return Caminho do arquivo ROM                 */                std::string getROMPath() const;                /**                 * @brief Cria um mapper apropriado com base nas informações da ROM                 * @param mapperNumber Número do mapper                 * @return Ponteiro para o mapper criado                 */                static std::unique_ptr<IMapper> createMapper(int32_t mapperNumber, void *cartridge);            private:                // Estrutura C original                nes_cartridge_t *m_cartridge;                // Flags para gerenciamento de estado                bool m_initialized;                // Ponteiro para a CPU                void *m_cpu;                // Mapper específico para a ROM carregada                std::unique_ptr<IMapper> m_mapper;            };        } // namespace NES    } // namespace Platforms} // namespace MegaEmu