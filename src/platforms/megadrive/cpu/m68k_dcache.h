#ifndef MD_M68K_DCACHE_H#define MD_M68K_DCACHE_H#ifdef __cplusplusextern "C" {#endif#include <stdint.h>// Configuração do cache de dados#define M68K_DCACHE_SIZE 512       // Tamanho do cache em linhas#define M68K_DCACHE_LINE_SIZE 32   // Tamanho de cada linha em bytes#define M68K_DCACHE_WAYS 4         // Associatividade do cache#define M68K_DCACHE_WRITE_BUFFER 8 // Tamanho do buffer de escrita// Política de escritatypedef enum{    M68K_WRITE_THROUGH = 0,    M68K_WRITE_BACK = 1} md_m68k_write_policy_t;// Estrutura de uma linha do cachetypedef struct{    uint32_t tag;                        // Tag do endereço    uint8_t data[M68K_DCACHE_LINE_SIZE]; // Dados da linha    uint32_t last_access;                // Contador de último acesso    uint8_t valid;                       // Flag de validade    uint8_t dirty;                       // Flag de modificação    uint32_t access_count;               // Contador de acessos    uint32_t write_count;                // Contador de escritas} md_m68k_dcache_line_t;// Entrada do buffer de escritatypedef struct{    uint32_t address; // Endereço de destino    uint32_t data;    // Dados a serem escritos    uint8_t size;     // Tamanho da escrita (1,2,4 bytes)    uint8_t valid;    // Flag de validade} md_m68k_write_buffer_entry_t;// Estrutura do cache de dadostypedef struct{    md_m68k_dcache_line_t lines[M68K_DCACHE_SIZE];    md_m68k_write_buffer_entry_t write_buffer[M68K_DCACHE_WRITE_BUFFER];    uint32_t write_buffer_head;    // Índice de inserção no buffer    uint32_t write_buffer_tail;    // Índice de remoção do buffer    uint32_t access_count;         // Contador global de acessos    uint32_t hits;                 // Contador de hits    uint32_t misses;               // Contador de misses    uint32_t writebacks;           // Contador de writebacks    md_m68k_write_policy_t policy; // Política de escrita atual    uint8_t enabled;               // Flag de habilitação} md_m68k_dcache_t;// Funções de gerenciamento do cachevoid md_m68k_init_dcache(void);void md_m68k_enable_dcache(int32_t enable);void md_m68k_set_write_policy(md_m68k_write_policy_t policy);uint32_t md_m68k_dcache_read_8(uint32_t address);uint32_t md_m68k_dcache_read_16(uint32_t address);uint32_t md_m68k_dcache_read_32(uint32_t address);void md_m68k_dcache_write_8(uint32_t address, uint8_t data);void md_m68k_dcache_write_16(uint32_t address, uint16_t data);void md_m68k_dcache_write_32(uint32_t address, uint32_t data);void md_m68k_dcache_flush(void);void md_m68k_dcache_invalidate(void);void md_m68k_dcache_flush_line(uint32_t address);void md_m68k_dcache_prefetch(uint32_t address);void md_m68k_dcache_stats(uint32_t *hits, uint32_t *misses, uint32_t *writebacks);#endif // MD_M68K_DCACHE_H