#ifndef MD_M68K_BRANCH_H#define MD_M68K_BRANCH_H#ifdef __cplusplusextern "C" {#endif#include <stdint.h>// Configuração do branch predictor#define M68K_BTB_SIZE 256   // Tamanho da Branch Target Buffer#define M68K_BHT_SIZE 1024  // Tamanho da Branch History Table#define M68K_HISTORY_BITS 2 // Bits de história por entrada// Estados do preditor de 2 bitstypedef enum{    STRONGLY_NOT_TAKEN = 0,    WEAKLY_NOT_TAKEN = 1,    WEAKLY_TAKEN = 2,    STRONGLY_TAKEN = 3} md_m68k_branch_state_t;// Entrada da Branch Target Buffertypedef struct{    uint32_t tag;                 // Tag do endereço do branch    uint32_t target;              // Endereço de destino    uint8_t valid;                // Flag de validade    uint8_t type;                 // Tipo do branch (condicional, incondicional)    md_m68k_branch_state_t state; // Estado do preditor    uint32_t last_access;         // Último acesso para LRU} md_m68k_btb_entry_t;// Estrutura do preditortypedef struct{    md_m68k_btb_entry_t btb[M68K_BTB_SIZE]; // Branch Target Buffer    uint8_t bht[M68K_BHT_SIZE];             // Branch History Table    uint32_t global_history;                // História global de branches    uint32_t hits;                          // Contador de predições corretas    uint32_t misses;                        // Contador de predições incorretas    uint8_t enabled;                        // Flag de habilitação} md_m68k_branch_predictor_t;// Funções de gerenciamento do branch predictorvoid md_m68k_init_branch_predictor(void);void md_m68k_enable_branch_predictor(int32_t enable);int32_t md_m68k_predict_branch(uint32_t pc, uint32_t *target);void md_m68k_update_branch_predictor(uint32_t pc, uint32_t target, int32_t taken);void md_m68k_branch_stats(uint32_t *hits, uint32_t *misses);void md_m68k_clear_branch_history(void);#endif // MD_M68K_BRANCH_H