/** * @file megadrive.h * @brief Interface para a plataforma Mega Drive/Genesis * @author Mega_Emu Team * @version 1.1.0 * @date 2024-03-13 */ #ifndef EMU_MEGADRIVE_H #define EMU_MEGADRIVE_H #include<stdint.h> #include<stddef.h> #include<stdbool.h> #include "../../core/core.h" #include "../../core/interfaces/memory_interface.h" #include "../../core/interfaces/video_interface.h" #include "../../core/interfaces/platform_interface.h" #ifdef __cplusplusextern "C" {#endif // Forward declarations    struct emu_cpu;    typedef struct emu_cpu *emu_cpu_t;    typedef struct emu_platform *emu_platform_t;    typedef struct memory_interface_s *md_memory_t;    typedef struct video_interface_s *md_video_t;    typedef struct audio_interface_s *md_audio_t;    typedef struct m68k_adapter_s *md_m68k_adapter_t;    typedef struct md_z80_adapter_s *md_z80_adapter_t;    typedef struct save_state_s *save_state_t;    /**     * @brief Estrutura do cabeçalho de ROM do Mega Drive     */    typedef struct    {        char console_name[16];    // "SEGA GENESIS    " / "SEGA MEGA DRIVE "        char copyright[16];       // "(C)SEGA 1988.JUL"        char domestic_name[48];   // Nome do jogo (Japão)        char overseas_name[48];   // Nome do jogo (Internacional)        char serial_number[14];   // Número de série "GM XXXXXXXX-XX"        uint16_t checksum;        // Checksum da ROM        char io_support[16];      // "J               " (dispositivos compatíveis)        uint32_t rom_start;       // Endereço inicial da ROM        uint32_t rom_end;         // Endereço final da ROM        uint32_t ram_start;       // Endereço inicial da RAM        uint32_t ram_end;         // Endereço final da RAM        char sram_info[12];       // Informações sobre a SRAM        char modem_info[12];      // Informações sobre o modem        char notes[40];           // Notas reservadas        char region[16];          // "JUE" (Japão, EUA, Europa)    } md_rom_header_t;    /**     * @brief Tipos comuns de mappers para cartuchos de Mega Drive     */    typedef enum    {        MD_MAPPER_NONE = 0,    // ROM padrão sem mapper        MD_MAPPER_SEGA,        // Mapper Sega padrão        MD_MAPPER_SSF2,        // Super Street Fighter 2 (bancos de 512KB)        MD_MAPPER_SSRPG,       // Phantasy Star/Shining Force (SRAM especial)        MD_MAPPER_EEPROM,      // Jogos com EEPROM integrada        MD_MAPPER_CODEMASTERS, // Mapper específico da Codemasters        MD_MAPPER_PIER_SOLAR,  // Jogos homebrew com chips especiais        MD_MAPPER_EA           // Electronic Arts mapper    } md_mapper_type_t;    /**     * @brief Informações do mapper     */    typedef struct    {        md_mapper_type_t type;   // Tipo de mapper        int32_t num_banks;       // Número de bancos        int32_t bank_size;       // Tamanho de cada banco em bytes        int32_t current_bank[8]; // Índice dos bancos atuais (até 8 slots)        uint8_t *sram;           // Ponteiro para a SRAM        size_t sram_size;        // Tamanho da SRAM        uint8_t has_eeprom;      // Flag para EEPROM        uint8_t has_rtc;         // Flag para RTC        // Funções de mapeamento específicas        uint8_t (*read)(uint32_t address);        void (*write)(uint32_t address, uint8_t value);    } md_mapper_t;    /**     * @brief Dados específicos da plataforma Mega Drive     */    typedef struct md_platform_data    {        // Informações de identificação        char name[32];            // Nome da plataforma        char id[16];              // ID da plataforma
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Estado da plataforma        int is_initialized;       // Flag de inicialização        int is_running;           // Flag de execução
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Componentes        md_memory_t memory;       // Sistema de memória        md_m68k_adapter_t m68k_cpu; // CPU principal (M68000)        md_z80_adapter_t z80_cpu;   // CPU secundária (Z80)        md_video_t vdp;           // Video Display Processor        md_audio_t audio;         // Sistema de áudio
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Dados da ROM        uint8_t *cart_rom;        // Ponteiro para a ROM do cartucho        size_t cart_rom_size;     // Tamanho da ROM em bytes        md_rom_header_t rom_header; // Cabeçalho da ROM
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Dados de memória        uint8_t *ram;             // Ponteiro para a RAM        size_t ram_size;          // Tamanho da RAM em bytes
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Configurações do sistema        uint32_t cpu_clock;       // Clock da CPU em Hz        uint32_t vdp_clock;       // Clock do VDP em Hz        uint32_t sound_clock;     // Clock do sistema de som em Hz        uint32_t screen_width;    // Largura da tela        uint32_t screen_height;   // Altura da tela        uint8_t has_secondary_cpu; // Tem CPU secundária        uint8_t has_color;        // Tem suporte a cores        uint8_t max_sprites;      // Número máximo de sprites        uint8_t max_colors;       // Número máximo de cores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Contadores        uint32_t frame_cycles;    // Ciclos do frame atual
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Estado do VDP        uint16_t vdp_data_buffer;    // Buffer de dados do VDP        uint16_t vdp_control_buffer; // Buffer de controle do VDP        uint16_t vdp_hv_counter;     // Contador H/V do VDP
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Estado dos controles        uint16_t pad1_state;      // Estado do controle 1        uint16_t pad2_state;      // Estado do controle 2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Estado da SRAM        uint16_t sram_control;    // Registrador de controle da SRAM
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Estado do Z80        uint16_t z80_control;     // Registrador de controle do Z80        uint16_t z80_bank_register;  // Registrador de banco do Z80        uint8_t *z80_ram;         // RAM do Z80 (8KB)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // Sistema de save state        bool has_save_state;      // Tem save state carregado        uint32_t save_state_counter; // Contador de save states        uint32_t play_time_seconds;  // Tempo de jogo em segundos    } md_platform_data_t;    /**     * @brief Cria uma instância da plataforma Mega Drive/Genesis     *     * @return Nova instância da plataforma ou NULL em caso de erro     */    emu_platform_t *emu_platform_megadrive_create(void);    /**     * @brief Funções principais da plataforma     */    bool md_init(emu_platform_t *platform, void *ctx);    bool md_shutdown(emu_platform_t *platform);    bool md_reset(emu_platform_t *platform);    bool md_load_rom(emu_platform_t *platform, const char *filename);    bool md_run_frame(emu_platform_t *platform);    bool md_run_cycles(emu_platform_t *platform, int32_t cycles);    /**     * @brief Define o estado de reset do Z80     */    void md_set_z80_reset(bool reset);    /**     * @brief Define o estado de bus request do Z80     */    void md_set_z80_busreq(bool request);    /**     * @brief Obtém o estado atual de bus request do Z80     */    bool md_get_z80_busreq(void);    /**     * @brief Define o banco de memória para o Z80 acessar a memória principal     */    void md_set_z80_bank(uint16_t bank);    /**     * @brief Salva o estado da plataforma Mega Drive     */    bool md_save_state_save(emu_platform_t *platform, const char *filename,         const uint8_t *screenshot_data, uint32_t width,         uint32_t height, uint32_t stride);    /**     * @brief Carrega um save state da plataforma Mega Drive     */    bool md_save_state_load(emu_platform_t *platform, const char *filename);    /**     * @brief Configura o sistema de rewind da plataforma Mega Drive     */    bool md_save_state_config_rewind(emu_platform_t *platform, uint32_t capacity,         uint32_t frames_per_snapshot);    /**     * @brief Captura um snapshot para o sistema de rewind     */    bool md_save_state_capture_rewind(emu_platform_t *platform);    /**     * @brief Aplica rewind de um estado     */    bool md_save_state_rewind(emu_platform_t *platform);    /**     * @brief Cria um save state para o Mega Drive     * @param md Ponteiro para a estrutura do Mega Drive     * @param state Ponteiro para a estrutura de save state     * @param slot Slot para o save state (0-9)     * @param create_thumbnail Se verdadeiro, cria uma thumbnail     * @return Código de erro do save state     */    int32_t megadrive_create_save_state(emu_platform_t *md, save_state_t *state, int32_t slot, bool create_thumbnail);    /**     * @brief Carrega um save state para o Mega Drive     * @param md Ponteiro para a estrutura do Mega Drive     * @param state Ponteiro para a estrutura de save state     * @param slot Slot para o save state (0-9)     * @return Código de erro do save state     */    int32_t megadrive_load_save_state(emu_platform_t *md, save_state_t *state, int32_t slot);    /**     * @brief Cria um snapshot para o sistema de rewind     * @param md Ponteiro para a estrutura do Mega Drive     * @param rewind_state Ponteiro para a estrutura de rewind     * @return Código de erro do save state     */    int32_t megadrive_create_rewind_snapshot(emu_platform_t *md, rewind_state_t *rewind_state);    /**     * @brief Aplica um snapshot de rewind     * @param md Ponteiro para a estrutura do Mega Drive     * @param rewind_state Ponteiro para a estrutura de rewind     * @param steps Número de passos para retroceder (negativo) ou avançar (positivo)     * @return Código de erro do save state     */    int32_t megadrive_apply_rewind_snapshot(emu_platform_t *md, rewind_state_t *rewind_state, int32_t steps);#ifdef __cplusplus}#endif#endif /* EMU_MEGADRIVE_H */
