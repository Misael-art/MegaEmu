#include <stdint.h>#include <stddef.h>#include "../../utils/common_types.h"#include "../../core/core.h"/** * @file md_core.h * @brief Interface C para a plataforma Mega Drive * @author Mega_Emu Team * @version 1.0.0 * @date 2024-03-13 */#ifndef MD_CORE_H#define MD_CORE_H#ifdef __cplusplusextern "C"{#endif    // Tipo opaco para o estado do Mega Drive    typedef struct megadrive_t megadrive_t;    // Funções de interface C++    bool md_cpp_initialize(void *instance);    bool md_cpp_load_rom(void *instance, const uint8_t *data, size_t size);    bool md_cpp_run_frame(void *instance);    /**     * @brief Cria uma nova instância do emulador Mega Drive     * @return Ponteiro para o estado do Mega Drive ou NULL em caso de erro     */    megadrive_t *megadrive_create(void);    /**     * @brief Destrói uma instância do emulador Mega Drive     * @param md Ponteiro para o estado do Mega Drive     */    void megadrive_destroy(megadrive_t *md);    /**     * @brief Inicializa o emulador Mega Drive     * @param md Ponteiro para o estado do Mega Drive     * @return EMU_SUCCESS em caso de sucesso, código de erro caso contrário     */    emu_error_t megadrive_init(megadrive_t *md);    /**     * @brief Carrega uma ROM no emulador Mega Drive     * @param md Ponteiro para o estado do Mega Drive     * @param data Ponteiro para os dados da ROM     * @param size Tamanho dos dados da ROM     * @return EMU_SUCCESS em caso de sucesso, código de erro caso contrário     */    emu_error_t megadrive_load_rom(megadrive_t *md, const uint8_t *data, size_t size);    /**     * @brief Executa um quadro de emulação     * @param md Ponteiro para o estado do Mega Drive     * @return EMU_SUCCESS em caso de sucesso, código de erro caso contrário     */    emu_error_t megadrive_run_frame(megadrive_t *md);    /**     * @brief Obtém o buffer de vídeo atual     * @param md Ponteiro para o estado do Mega Drive     * @return Ponteiro para o buffer de vídeo ou NULL em caso de erro     */    const uint32_t *megadrive_get_video_buffer(const megadrive_t *md);    /**     * @brief Atualiza o estado do controle     * @param md Ponteiro para o estado do Mega Drive     * @param controller_state Estado do controle     * @param controller_index Índice do controle (0-3)     */    void megadrive_update_controller(megadrive_t *md, const void *controller_state, int32_t controller_index);    /**     * @brief Salva o estado do emulador     * @param md Ponteiro para o estado do Mega Drive     * @param filename Nome do arquivo para salvar o estado     * @return EMU_SUCCESS em caso de sucesso, código de erro caso contrário     */    emu_error_t megadrive_save_state(megadrive_t *md, const char *filename);    /**     * @brief Carrega o estado do emulador     * @param md Ponteiro para o estado do Mega Drive     * @param filename Nome do arquivo para carregar o estado     * @return EMU_SUCCESS em caso de sucesso, código de erro caso contrário     */    emu_error_t megadrive_load_state(megadrive_t *md, const char *filename);#ifdef __cplusplus}#endif#endif /* MD_CORE_H */