/** * @file ym2612.h * @brief Emulação do chip de som YM2612 (OPN2) do Mega Drive * * O YM2612 é um chip de síntese FM de 6 canais usado no Mega Drive/Genesis * para gerar áudio complexo. Este arquivo define a interface para a emulação * deste chip no Mega_Emu. */#ifndef EMU_YM2612_H#define EMU_YM2612_H#include <stdint.h>#include <stdbool.h>#include "../../../utils/common_types.h"// Definição de constantes#define YM2612_CLOCK_FREQ 7670454  // Frequência do clock em Hz#define YM2612_NUM_CHANNELS 6      // Número de canais#define YM2612_NUM_OPERATORS 4     // Operadores por canal#define YM2612_NUM_REGISTERS 0x200 // Número total de registradores#define YM2612_OUTPUTS 2           // Saídas estéreo (L/R)#define YM2612_SAMPLE_RATE 44100   // Taxa de amostragem padrão// Estrutura para cada operadortypedef struct{    // Parâmetros do operador    uint8_t dt;     // Detune    uint8_t mul;    // Multiplicador de frequência    uint8_t tl;     // Total level (atenuação)    uint8_t ks;     // Key scale    uint8_t ar;     // Attack rate    uint8_t am;     // Amplitude modulation enable    uint8_t dr;     // Decay rate    uint8_t sr;     // Sustain rate    uint8_t sl;     // Sustain level    uint8_t rr;     // Release rate    uint8_t ssg_eg; // SSG-EG envelope control    // Estado do envelope    uint8_t state;      // Estado atual do envelope (attack, decay, sustain, release)    uint32_t env_level; // Nível atual do envelope    int32_t output;     // Saída do operador} ym2612_operator_t;// Estrutura para cada canaltypedef struct{    ym2612_operator_t operators[YM2612_NUM_OPERATORS]; // 4 operadores por canal    // Parâmetros do canal    uint16_t freq_num; // Número de frequência    uint8_t block;     // Bloco de oitava    uint8_t feedback;  // Nível de feedback    uint8_t algorithm; // Algoritmo de conexão de operadores    uint8_t ams;       // Sensibilidade da modulação de amplitude    uint8_t pms;       // Sensibilidade da modulação de fase    bool key_on;       // Flag de nota ativa    // Buffer de saída do canal    int32_t output[YM2612_OUTPUTS];} ym2612_channel_t;// Estrutura geral para o chip YM2612typedef struct{    ym2612_channel_t channels[YM2612_NUM_CHANNELS]; // 6 canais    // Estado geral    uint8_t registers[YM2612_NUM_REGISTERS]; // Registradores    uint8_t lfo_enable;                      // Habilitação do LFO    uint8_t lfo_freq;                        // Frequência do LFO    uint8_t timer_a_val;                     // Valor do timer A    uint8_t timer_b_val;                     // Valor do timer B    bool timer_a_enable;                     // Habilitação do timer A    bool timer_b_enable;                     // Habilitação do timer B    // Estado interno    uint32_t rate;     // Taxa de amostragem    uint32_t clock;    // Frequência do clock    float clock_ratio; // Razão clock/sample rate    // Contadores    uint32_t cycles;            // Ciclos acumulados    uint32_t samples_generated; // Amostras geradas} ym2612_t;/** * @brief Inicializa o chip YM2612 * * @param chip Ponteiro para a estrutura do chip * @param clock Frequência do clock em Hz * @param rate Taxa de amostragem em Hz * @return emu_error_t EMU_ERROR_NONE se bem-sucedido */emu_error_t ym2612_init(ym2612_t *chip, uint32_t clock, uint32_t rate);/** * @brief Reseta o estado do chip YM2612 * * @param chip Ponteiro para a estrutura do chip * @return emu_error_t EMU_ERROR_NONE se bem-sucedido */emu_error_t ym2612_reset(ym2612_t *chip);/** * @brief Libera recursos utilizados pelo chip YM2612 * * @param chip Ponteiro para a estrutura do chip */void ym2612_shutdown(ym2612_t *chip);/** * @brief Escreve um valor em um registrador * * @param chip Ponteiro para a estrutura do chip * @param port Porta (0 para registradores 0x00-0xFF, 1 para 0x100-0x1FF) * @param reg Registrador * @param value Valor a ser escrito */void ym2612_write(ym2612_t *chip, uint8_t port, uint8_t reg, uint8_t value);/** * @brief Lê um valor de um registrador * * @param chip Ponteiro para a estrutura do chip * @param port Porta (0 para registradores 0x00-0xFF, 1 para 0x100-0x1FF) * @param reg Registrador * @return uint8_t Valor lido */uint8_t ym2612_read(ym2612_t *chip, uint8_t port, uint8_t reg);/** * @brief Atualiza o estado do chip e gera amostras * * @param chip Ponteiro para a estrutura do chip * @param buffer_left Buffer para o canal esquerdo * @param buffer_right Buffer para o canal direito * @param num_samples Número de amostras a gerar * @return int32_t Número de amostras geradas */int32_t ym2612_update(ym2612_t *chip, int16_t *buffer_left, int16_t *buffer_right, int32_t num_samples);/** * @brief Define a taxa de amostragem * * @param chip Ponteiro para a estrutura do chip * @param rate Nova taxa de amostragem em Hz */void ym2612_set_sample_rate(ym2612_t *chip, uint32_t rate);/** * @brief Define a frequência do clock * * @param chip Ponteiro para a estrutura do chip * @param clock Nova frequência do clock em Hz */void ym2612_set_clock(ym2612_t *chip, uint32_t clock);/** * @brief Avança o YM2612 pelo número especificado de ciclos * * @param chip Ponteiro para a estrutura do chip * @param cycles Número de ciclos para avançar */void ym2612_advance(ym2612_t *chip, uint32_t cycles);#endif // EMU_YM2612_H