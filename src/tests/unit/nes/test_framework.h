#ifndef TEST_FRAMEWORK_H#define TEST_FRAMEWORK_H#include <stdint.h>#include <stdbool.h>#include <stdio.h>// Estrutura para um caso de testetypedef struct{    const char *name;        // Nome do teste    const char *description; // Descrição do teste    void (*setup)(void);     // Função de setup    void (*teardown)(void);  // Função de teardown    bool (*run)(void);       // Função que executa o teste} nes_test_case_t;// Estrutura para uma suíte de testestypedef struct{    const char *name;             // Nome da suíte    nes_test_case_t *tests;       // Array de testes    int32_t num_tests;                // Número de testes    void (*suite_setup)(void);    // Setup da suíte    void (*suite_teardown)(void); // Teardown da suíte} nes_test_suite_t;// Estrutura para resultados de testetypedef struct{    int32_t tests_run;       // Total de testes executados    int32_t tests_passed;    // Testes que passaram    int32_t tests_failed;    // Testes que falharam    char **failed_tests; // Nomes dos testes que falharam} nes_test_results_t;// Funções do frameworkvoid nes_test_init(void);void nes_test_shutdown(void);void nes_test_register_suite(nes_test_suite_t *suite);nes_test_results_t nes_test_run_all(void);void nes_test_print_results(const nes_test_results_t *results);// Macros de asserção#define TEST_ASSERT(condition)                                      \    do                                                              \    {                                                               \        if (!(condition))                                           \        {                                                           \            printf("\nFalha na asserção: %s\n", #condition);        \            printf("Arquivo: %s, Linha: %d\n", __FILE__, __LINE__); \            return false;                                           \        }                                                           \    } while (0)#define TEST_ASSERT_EQUAL(expected, actual)                                       \    do                                                                            \    {                                                                             \        if ((expected) != (actual))                                               \        {                                                                         \            printf("\nFalha na asserção: %s != %s\n", #expected, #actual);        \            printf("Esperado: %d, Obtido: %d\n", (int32_t)(expected), (int32_t)(actual)); \            printf("Arquivo: %s, Linha: %d\n", __FILE__, __LINE__);               \            return false;                                                         \        }                                                                         \    } while (0)#define TEST_ASSERT_EQUAL_HEX(expected, actual)                        \    do                                                                 \    {                                                                  \        if ((expected) != (actual))                                    \        {                                                              \            printf("❌ Asserção falhou: esperado 0x%X, obtido 0x%X\n", \                   (unsigned int32_t)(expected), (unsigned int32_t)(actual));  \            return false;                                              \        }                                                              \    } while (0)#endif /* TEST_FRAMEWORK_H */