/** * @file factory.cpp * @brief Implementação da fábrica de plataformas * @author Mega_Emu Team * @version 1.2.0 * @date 2024-03-13 */#include <memory>#include <iostream>#include "core/platform.hpp"// Inclusão da implementação MegaDrive#include "../platforms/megadrive/megadrive.hpp"// Inclusão da implementação NES#include "../platforms/nes/nes.hpp"// Forward declarations das outras implementações específicasnamespace MegaEmu{    namespace Platforms    {        // Estas classes serão implementadas em seus respectivos arquivos        class SNES;        class MasterSystem;    } // namespace Platforms} // namespace MegaEmunamespace MegaEmu{    namespace Core    {        /**         * @brief Cria uma instância de plataforma com base no tipo         * @param type Tipo de plataforma         * @return Ponteiro único para a plataforma ou nullptr em caso de erro         */        std::unique_ptr<Platform> createPlatform(emu_platform_type_t type)        {            std::unique_ptr<Platform> platform = nullptr;            // Criar instância da plataforma solicitada            switch (type)            {            case EMU_PLATFORM_MEGADRIVE:                std::cout << "Criando plataforma Mega Drive" << std::endl;                platform = std::make_unique<MegaEmu::Platforms::MegaDrive>();                break;            case EMU_PLATFORM_NES:                std::cout << "Criando plataforma NES" << std::endl;                platform = std::make_unique<MegaEmu::Platforms::NES>();                break;            case EMU_PLATFORM_SNES:                std::cout << "Criando plataforma SNES (stub)" << std::endl;                // platform = std::make_unique<MegaEmu::Platforms::SNES>();                break;            case EMU_PLATFORM_MASTERSYSTEM:                std::cout << "Criando plataforma Master System (stub)" << std::endl;                // platform = std::make_unique<MegaEmu::Platforms::MasterSystem>();                break;            default:                std::cerr << "Plataforma não suportada: " << static_cast<int>(type) << std::endl;                return nullptr;            }            // Verificar se a plataforma foi criada            if (!platform)            {                std::cerr << "AVISO: A implementação da plataforma solicitada ainda não está disponível." << std::endl;            }            return platform;        }    } // namespace Core} // namespace MegaEmu