/** * @file component_interfaces.h * @brief Interfaces padronizadas para os componentes do emulador Mega_Emu * * Este arquivo define interfaces consistentes para todos os componentes * do emulador, seguindo o novo padrão de design. */#ifndef EMU_COMPONENT_INTERFACES_H#define EMU_COMPONENT_INTERFACES_H#include <stdint.h>#include <stdlib.h>#ifdef __cplusplusextern "C"{#endif    /**     * @brief Tipos de componentes suportados     */    typedef enum    {        EMU_COMPONENT_CPU,        EMU_COMPONENT_MEMORY,        EMU_COMPONENT_VIDEO,        EMU_COMPONENT_AUDIO,        EMU_COMPONENT_INPUT,        EMU_COMPONENT_COUNT    } emu_component_type_t;    /**     * @brief Interface genérica para todos os componentes     */    typedef struct    {        int32_t (*init)(void *context);        void (*shutdown)(void *context);        void (*reset)(void *context);        const char *(*get_name)(void *context);        const char *(*get_version)(void *context);    } emu_component_interface_t;    /**     * @brief Interface para componentes de CPU     */    typedef struct    {        // Herda a interface de componente básico        emu_component_interface_t base;        // Funções específicas da CPU        int32_t (*run_cycles)(void *context, int32_t cycles);        uint32_t (*read_reg)(void *context, int32_t reg_id);        void (*write_reg)(void *context, int32_t reg_id, uint32_t value);        void (*set_interrupt)(void *context, int32_t int_line, int32_t state);        int32_t (*get_cycles_executed)(void *context);        uint32_t (*get_pc)(void *context);    } emu_cpu_interface_t;    /**     * @brief Interface para componentes de memória     */    typedef struct    {        // Herda a interface de componente básico        emu_component_interface_t base;        // Funções específicas de memória        uint8_t (*read8)(void *context, uint32_t address);        void (*write8)(void *context, uint32_t address, uint8_t value);        uint16_t (*read16)(void *context, uint32_t address);        void (*write16)(void *context, uint32_t address, uint16_t value);        uint32_t (*read32)(void *context, uint32_t address);        void (*write32)(void *context, uint32_t address, uint32_t value);        int32_t (*load_rom)(void *context, const uint8_t *data, size_t size);        int32_t (*map_memory)(void *context, uint32_t start, uint32_t end, int32_t type);    } emu_memory_interface_t;    /**     * @brief Interface para componentes de vídeo     */    typedef struct    {        // Herda a interface de componente básico        emu_component_interface_t base;        // Funções específicas de vídeo        void (*update)(void *context, int32_t cycles);        int32_t (*render_frame)(void *context, uint32_t *framebuffer, int32_t width, int32_t height);        int32_t (*get_screen_width)(void *context);        int32_t (*get_screen_height)(void *context);        void (*set_display_mode)(void *context, int32_t mode);        int32_t (*get_display_mode)(void *context);    } emu_video_interface_t;    /**     * @brief Interface para componentes de áudio     */    typedef struct    {        // Herda a interface de componente básico        emu_component_interface_t base;        // Funções específicas de áudio        void (*update)(void *context, int32_t cycles);        int32_t (*render_audio)(void *context, int16_t *buffer, int32_t num_samples);        int32_t (*get_sample_rate)(void *context);        void (*set_sample_rate)(void *context, int32_t sample_rate);        void (*set_volume)(void *context, float volume);        float (*get_volume)(void *context);    } emu_audio_interface_t;    /**     * @brief Interface para componentes de entrada     */    typedef struct    {        // Herda a interface de componente básico        emu_component_interface_t base;        // Funções específicas de entrada        void (*set_button_state)(void *context, int32_t controller, int32_t button, int32_t state);        int32_t (*get_button_state)(void *context, int32_t controller, int32_t button);        int32_t (*get_num_controllers)(void *context);        int32_t (*get_num_buttons)(void *context);        const char *(*get_button_name)(void *context, int32_t button);    } emu_input_interface_t;    /**     * @brief Funções para gerenciamento de componentes     */    int32_t emu_register_component(void *platform, emu_component_type_t type, void *interface, void *context);    void *emu_get_component(void *platform, emu_component_type_t type);    int32_t emu_init_all_components(void *platform);    void emu_shutdown_all_components(void *platform);    void emu_reset_all_components(void *platform);#ifdef __cplusplus}#endif#endif /* EMU_COMPONENT_INTERFACES_H */