#include <stdint.h>/** * @file rom_system.hpp * @brief Define a classe base para o sistema de ROM * @author Mega_Emu Team * @version 1.0.0 * @date 2024-03-10 */#pragma once#include <string>#include <vector>#include <memory>#include <fstream>#include <filesystem>#include <stdexcept>#include <algorithm>#include <cstring>#if defined(_MSC_VER) && _MSC_VER >= 1900 && _MSC_VER < 1920namespace fs = std::experimental::filesystem;#elsenamespace fs = std::filesystem;#endifnamespace MegaEmu{    namespace Core    {        /**         * @brief Enumeração dos tipos de ROM suportados         */        enum class ROMType        {            Unknown,     ///< Tipo desconhecido            MegaDrive,   ///< ROM de Mega Drive            NES,         ///< ROM de NES            SNES,        ///< ROM de SNES            MasterSystem ///< ROM de Master System        };        /**         * @brief Estrutura que representa os metadados de uma ROM         */        struct ROMMetadata        {            std::string title;       ///< Título da ROM            std::string region;      ///< Região da ROM            std::string publisher;   ///< Publicadora da ROM            std::string releaseDate; ///< Data de lançamento            std::string description; ///< Descrição da ROM            std::string genre;       ///< Gênero da ROM            std::string checksum;    ///< Checksum da ROM            size_t sizeInBytes;      ///< Tamanho em bytes            ROMType type;            ///< Tipo da ROM            ROMMetadata() : sizeInBytes(0), type(ROMType::Unknown) {}        };        /**         * @brief Classe que gerencia o sistema de ROM         */        class ROMSystem        {        public:            ROMSystem();            ~ROMSystem();            bool loadROM(const std::string &filename);            void unloadROM();            const std::string &getLastError() const;            const ROMMetadata &getMetadata() const;            const std::vector<uint8_t> &getROMData() const;            ROMType getROMType() const;            bool isLoaded() const;            uint8_t readByte(size_t address) const;            uint16_t readWord(size_t address) const;            std::string readString(size_t address, size_t length) const;        private:            ROMMetadata extractMetadata(const std::string &filename);            std::vector<uint8_t> m_romData;            ROMMetadata m_metadata;            std::string m_lastError;            bool m_isLoaded;        };    } // namespace Core} // namespace MegaEmu