#ifndef EMU_VIDEO_INTERFACE_H#define EMU_VIDEO_INTERFACE_H#ifdef __cplusplusextern "C" {#endif#include <stdint.h>#include <stdbool.h>#include "../../utils/error_handling.h"// Constantes do sistema de vídeo#define EMU_VIDEO_MAX_WIDTH 1024#define EMU_VIDEO_MAX_HEIGHT 768#define EMU_VIDEO_MAX_SPRITES 256#define EMU_VIDEO_MAX_LAYERS 16#define EMU_VIDEO_MAX_PALETTES 16#define EMU_VIDEO_PALETTE_SIZE 256// Forward declarationstypedef struct emu_video_instance emu_video_instance_t;typedef struct emu_video_instance *emu_video_t;// Estrutura de spritetypedef struct{    uint16_t x;    uint16_t y;    uint16_t width;    uint16_t height;    uint8_t *data;    uint8_t palette_index;    bool visible;    void *user_data;} video_sprite_t;// Estrutura de camadatypedef struct{    uint16_t width;    uint16_t height;    uint8_t *data;    uint8_t palette_index;    bool visible;    uint8_t priority;    void *user_data;} video_layer_t;// Estrutura principal de vídeostruct emu_video_instance{    uint8_t *framebuffer;    uint32_t palettes[EMU_VIDEO_MAX_PALETTES][EMU_VIDEO_PALETTE_SIZE];    video_sprite_t sprites[EMU_VIDEO_MAX_SPRITES];    video_layer_t layers[EMU_VIDEO_MAX_LAYERS];    uint16_t width;    uint16_t height;    uint8_t num_sprites;    uint8_t num_layers;    uint8_t num_palettes;    bool initialized;    void *user_data;    // Callbacks    void (*render_callback)(emu_video_t video);    uint8_t (*read_register)(emu_video_t video, uint16_t address);    void (*write_register)(emu_video_t video, uint16_t address, uint8_t value);    uint8_t (*read_data)(emu_video_t video, uint16_t address);    void (*write_data)(emu_video_t video, uint16_t address, uint8_t value);    uint8_t (*read_control)(emu_video_t video);    void (*write_control)(emu_video_t video, uint8_t value);    bool (*is_frame_complete)(emu_video_t video);};// Funções de gerenciamento de vídeoemu_video_t emu_video_create(void);void emu_video_destroy(emu_video_t video);bool emu_video_init(emu_video_t video);bool emu_video_reset(emu_video_t video);// Funções de acesso ao hardwarebool emu_video_write_register(emu_video_t video, uint16_t address, uint8_t value);bool emu_video_read_register(emu_video_t video, uint16_t address, uint8_t *value);bool emu_video_write_data(emu_video_t video, uint16_t address, uint8_t value);bool emu_video_read_data(emu_video_t video, uint16_t address, uint8_t *value);bool emu_video_write_control(emu_video_t video, uint8_t value);bool emu_video_read_control(emu_video_t video, uint8_t *value);bool emu_video_is_frame_complete(emu_video_t video);// Funções de renderizaçãobool emu_video_render_frame(emu_video_t video);bool emu_video_clear_framebuffer(emu_video_t video);bool emu_video_set_palette(emu_video_t video, uint8_t palette_index, uint8_t color_index, uint32_t color);// Funções de gerenciamento de spritesbool emu_video_add_sprite(emu_video_t video, uint8_t sprite_index, uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t *data, uint8_t palette_index);bool emu_video_remove_sprite(emu_video_t video, uint8_t sprite_index);bool emu_video_update_sprite(emu_video_t video, uint8_t sprite_index, uint16_t x, uint16_t y);bool emu_video_set_sprite_visibility(emu_video_t video, uint8_t sprite_index, bool visible);// Funções de gerenciamento de camadasbool emu_video_add_layer(emu_video_t video, uint8_t layer_index, uint16_t width, uint16_t height, uint8_t *data, uint8_t palette_index, uint8_t priority);bool emu_video_remove_layer(emu_video_t video, uint8_t layer_index);bool emu_video_set_layer_visibility(emu_video_t video, uint8_t layer_index, bool visible);bool emu_video_set_layer_priority(emu_video_t video, uint8_t layer_index, uint8_t priority);#endif // EMU_VIDEO_INTERFACE_H