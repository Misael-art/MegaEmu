#ifndef EMU_VIDEO_H#define EMU_VIDEO_H#include "../core_types.h"#include "../memory/memory_interface.h"#include "../../utils/error_handling.h"#include "../../utils/enhanced_log.h"#include <stdint.h>#ifdef __cplusplusextern "C"{#endif// Constantes do VDP#define VDP_MAX_SPRITES 80#define VDP_MAX_TILES 1024#define VDP_PALETTE_SIZE 64#define VDP_SCREEN_WIDTH 320#define VDP_SCREEN_HEIGHT 240    // Estrutura de sprite    typedef struct    {        uint16_t y_pos;        uint16_t x_pos;        uint16_t tile_index;        uint16_t attributes;        uint8_t size;        uint8_t color;    } vdp_sprite_t;    // Estrutura de tile    typedef struct    {        uint8_t data[32]; // 8x8 pixels, 4 bits por pixel        uint8_t palette;        uint8_t priority;        uint8_t flip_x;        uint8_t flip_y;    } vdp_tile_t;    // Estrutura do VDP    typedef struct    {        uint8_t vram[0x10000]; // 64KB de VRAM        uint8_t cram[0x80];    // 128 bytes de CRAM (paleta)        uint8_t vsram[0x50];   // 80 bytes de VSRAM (scroll)        uint8_t registers[24]; // Registradores do VDP        vdp_sprite_t sprites[VDP_MAX_SPRITES];        vdp_tile_t tiles[VDP_MAX_TILES];        uint8_t screen[VDP_SCREEN_WIDTH * VDP_SCREEN_HEIGHT * 4]; // RGBA        int32_t frame_count;        int32_t scanline;        int32_t hblank;        int32_t vblank;        int32_t dma_active;        int32_t dma_type;        int32_t dma_length;        int32_t dma_source;        int32_t dma_dest;        void *userdata;    } emu_video_t;    // Funções do VDP    emu_video_t *emu_video_create(void);    void emu_video_destroy(emu_video_t *video);    int32_t emu_video_init(emu_video_t *video);    void emu_video_shutdown(emu_video_t *video);    int32_t emu_video_reset(emu_video_t *video);    int32_t emu_video_run_frame(emu_video_t *video);    int32_t emu_video_run_scanline(emu_video_t *video);    void emu_video_set_userdata(emu_video_t *video, void *userdata);    void *emu_video_get_userdata(emu_video_t *video);    // Funções de acesso ao VDP    void emu_video_write_vram(emu_video_t *video, uint16_t address, uint8_t value);    uint8_t emu_video_read_vram(emu_video_t *video, uint16_t address);    void emu_video_write_cram(emu_video_t *video, uint8_t address, uint8_t value);    uint8_t emu_video_read_cram(emu_video_t *video, uint8_t address);    void emu_video_write_vsram(emu_video_t *video, uint8_t address, uint8_t value);    uint8_t emu_video_read_vsram(emu_video_t *video, uint8_t address);    void emu_video_write_register(emu_video_t *video, uint8_t reg, uint8_t value);    uint8_t emu_video_read_register(emu_video_t *video, uint8_t reg);    // Funções de debug    void emu_video_get_screen(emu_video_t *video, uint8_t *buffer);    int32_t emu_video_get_frame_count(emu_video_t *video);    int32_t emu_video_get_scanline(emu_video_t *video);    int32_t emu_video_get_hblank(emu_video_t *video);    int32_t emu_video_get_vblank(emu_video_t *video);    int32_t emu_video_get_dma_active(emu_video_t *video);#ifdef __cplusplus}#endif#endif // EMU_VIDEO_H