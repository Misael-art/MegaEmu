#include "rom_system.hpp"#include <algorithm>#include <cstring>#include <fstream>#include <sstream>namespace MegaEmu{    namespace Core    {        ROMSystem::ROMSystem() : m_isLoaded(false), m_lastError("") {}        ROMSystem::~ROMSystem()        {            unloadROM();        }        bool ROMSystem::loadROM(const std::string &filename)        {            namespace fs = std::filesystem;            // Verificar se o arquivo existe            if (!fs::exists(filename))            {                m_lastError = "Arquivo ROM não encontrado: " + filename;                return false;            }            // Abrir o arquivo            std::ifstream file(filename, std::ios::binary);            if (!file.is_open())            {                m_lastError = "Não foi possível abrir o arquivo ROM: " + filename;                return false;            }            // Obter o tamanho do arquivo            file.seekg(0, std::ios::end);            size_t fileSize = file.tellg();            file.seekg(0, std::ios::beg);            // Ler o arquivo para o buffer            m_romData.resize(fileSize);            if (!file.read(reinterpret_cast<char *>(m_romData.data()), fileSize))            {                m_lastError = "Erro ao ler o arquivo ROM";                m_romData.clear();                return false;            }            // Extrair metadados            m_metadata = extractMetadata(filename);            m_metadata.sizeInBytes = fileSize;            m_isLoaded = true;            return true;        }        void ROMSystem::unloadROM()        {            m_romData.clear();            m_isLoaded = false;            m_lastError = "";        }        ROMMetadata ROMSystem::extractMetadata(const std::string &filename)        {            namespace fs = std::filesystem;            ROMMetadata metadata;            fs::path romPath(filename);            // Extrair título do nome do arquivo            metadata.title = romPath.stem().string();            // Tentar determinar o tipo de ROM pela extensão            std::string ext = romPath.extension().string();            std::transform(ext.begin(), ext.end(), ext.begin(), ::tolower);            if (ext == ".nes")            {                metadata.type = ROMType::NES;            }            else if (ext == ".smd" || ext == ".gen" || ext == ".md")            {                metadata.type = ROMType::MegaDrive;            }            else if (ext == ".sms")            {                metadata.type = ROMType::MasterSystem;            }            else if (ext == ".sfc" || ext == ".smc")            {                metadata.type = ROMType::SNES;            }            else            {                metadata.type = ROMType::Unknown;            }            return metadata;        }        const std::string &ROMSystem::getLastError() const        {            return m_lastError;        }        const ROMMetadata &ROMSystem::getMetadata() const        {            return m_metadata;        }        const std::vector<uint8_t> &ROMSystem::getROMData() const        {            return m_romData;        }        ROMType ROMSystem::getROMType() const        {            return m_metadata.type;        }        bool ROMSystem::isLoaded() const        {            return m_isLoaded;        }        uint8_t ROMSystem::readByte(size_t address) const        {            if (!m_isLoaded || address >= m_romData.size())            {                return 0;            }            return m_romData[address];        }        uint16_t ROMSystem::readWord(size_t address) const        {            if (!m_isLoaded || address + 1 >= m_romData.size())            {                return 0;            }            return static_cast<uint16_t>(m_romData[address]) |                   (static_cast<uint16_t>(m_romData[address + 1]) << 8);        }        std::string ROMSystem::readString(size_t address, size_t length) const        {            if (!m_isLoaded || address >= m_romData.size())            {                return "";            }            size_t actualLength = std::min(length, m_romData.size() - address);            std::string result;            result.reserve(actualLength);            for (size_t i = 0; i < actualLength; ++i)            {                char c = static_cast<char>(m_romData[address + i]);                if (c == '\0')                    break;                result.push_back(c);            }            return result;        }    } // namespace Core} // namespace MegaEmu