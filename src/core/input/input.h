#ifndef EMU_INPUT_H#define EMU_INPUT_H#include "../core_types.h"#include "../../utils/error_handling.h"#include "../../utils/enhanced_log.h"#include <stdint.h>#include "input_interface.h"#ifdef __cplusplusextern "C"{#endif/* Constantes do sistema de entrada */#define INPUT_MAX_CONTROLLERS 8#define INPUT_MAX_BUTTONS 12    /* Botões do controle */    typedef enum input_button    {        INPUT_BUTTON_UP = 0,        INPUT_BUTTON_DOWN,        INPUT_BUTTON_LEFT,        INPUT_BUTTON_RIGHT,        INPUT_BUTTON_A,        INPUT_BUTTON_B,        INPUT_BUTTON_C,        INPUT_BUTTON_X,        INPUT_BUTTON_Y,        INPUT_BUTTON_Z,        INPUT_BUTTON_START,        INPUT_BUTTON_MODE    } input_button_t;    /* Estrutura de controle */    typedef struct input_controller    {        uint16_t buttons;        uint16_t buttons_prev;        uint8_t connected;        uint8_t type;    } input_controller_t;    /* Estrutura do sistema de entrada */    struct emu_input_instance    {        input_controller_t controllers[INPUT_MAX_CONTROLLERS];        int32_t num_controllers;        void *userdata;    };    /* Funções do sistema de entrada */    emu_input_t *emu_input_create(void);    void emu_input_destroy(emu_input_t *input);    int32_t emu_input_init(emu_input_t *input);    void emu_input_shutdown(emu_input_t *input);    int32_t emu_input_reset(emu_input_t *input);    void emu_input_set_userdata(emu_input_t *input, void *userdata);    void *emu_input_get_userdata(emu_input_t *input);    /* Funções de controle de botões */    void emu_input_set_button(emu_input_t *input, int32_t controller, input_button_t button, int32_t pressed);    int32_t emu_input_get_button(emu_input_t *input, int32_t controller, input_button_t button);    int32_t emu_input_get_button_pressed(emu_input_t *input, int32_t controller, input_button_t button);    int32_t emu_input_get_button_released(emu_input_t *input, int32_t controller, input_button_t button);    /* Funções de controle de controles */    void emu_input_set_controller_connected(emu_input_t *input, int32_t controller, int32_t connected);    int32_t emu_input_get_controller_connected(emu_input_t *input, int32_t controller);    void emu_input_set_controller_type(emu_input_t *input, int32_t controller, int32_t type);    int32_t emu_input_get_controller_type(emu_input_t *input, int32_t controller);    /* Função de atualização */    void emu_input_update(emu_input_t *input);    /* Funções internas */    void emu_input_update_button_states(emu_input_instance_t *input);    void emu_input_process_events(emu_input_instance_t *input);#ifdef __cplusplus}#endif#endif /* EMU_INPUT_H */