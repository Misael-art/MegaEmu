/** * @file input_interface.h * @brief Interface do sistema de entrada */#ifndef EMU_INPUT_INTERFACE_H#define EMU_INPUT_INTERFACE_H#include <stdint.h>#include <stdbool.h>#ifdef __cplusplusextern "C"{#endif/* Constantes do sistema de entrada */#define INPUT_MAX_CONTROLLERS 4#define INPUT_MAX_BUTTONS 16#define INPUT_TYPE_NONE 0#define INPUT_TYPE_3BUTTON 1#define INPUT_TYPE_6BUTTON 2    typedef enum    {        EMU_INPUT_TYPE_KEYBOARD,        EMU_INPUT_TYPE_MOUSE,        EMU_INPUT_TYPE_JOYSTICK,        EMU_INPUT_TYPE_GAMEPAD,        EMU_INPUT_TYPE_COUNT    } emu_input_type_t;    typedef struct    {        emu_input_type_t type;        uint32_t id;        const char *name;        bool is_analog;        float deadzone;        float sensitivity;    } emu_input_config_entry_t;    typedef struct    {        emu_input_config_entry_t *entries;        int32_t num_entries;        int32_t max_entries;    } emu_input_config_data_t;    /* Botões do controlador */    typedef enum    {        INPUT_BUTTON_UP,        INPUT_BUTTON_DOWN,        INPUT_BUTTON_LEFT,        INPUT_BUTTON_RIGHT,        INPUT_BUTTON_A,        INPUT_BUTTON_B,        INPUT_BUTTON_C,        INPUT_BUTTON_X,        INPUT_BUTTON_Y,        INPUT_BUTTON_Z,        INPUT_BUTTON_START,        INPUT_BUTTON_MODE,        INPUT_BUTTON_MAX    } input_button_t;    /* Forward declarations */    typedef struct emu_input_instance emu_input_instance_t;    typedef struct emu_input_controller emu_input_controller_t;    /* Estrutura do controlador */    struct emu_input_controller    {        uint16_t buttons;      /* Estado atual dos botões */        uint16_t buttons_prev; /* Estado anterior dos botões */        int32_t connected;         /* Controlador conectado */        int32_t type;              /* Tipo do controlador */    };    /* Estrutura principal do sistema de entrada */    struct emu_input_instance    {        bool initialized;                                          /* Sistema inicializado */        emu_input_controller_t controllers[INPUT_MAX_CONTROLLERS]; /* Controladores */        int32_t num_controllers;                                       /* Número de controladores */        void *userdata;                                            /* Dados do usuário */        uint8_t *buttons;                                          /* Estado dos botões */        int8_t *axes;                                              /* Estado dos eixos */    };    /* Funções de interface */    emu_input_instance_t *emu_input_create(void);    void emu_input_destroy(emu_input_instance_t *input);    int32_t emu_input_init(emu_input_instance_t *input);    void emu_input_shutdown(emu_input_instance_t *input);    int32_t emu_input_reset(emu_input_instance_t *input);    /* Funções de dados do usuário */    void emu_input_set_userdata(emu_input_instance_t *input, void *userdata);    void *emu_input_get_userdata(emu_input_instance_t *input);    /* Funções de botões */    void emu_input_set_button(emu_input_instance_t *input, int32_t controller, input_button_t button, int32_t pressed);    int32_t emu_input_get_button(emu_input_instance_t *input, int32_t controller, input_button_t button);    int32_t emu_input_get_button_pressed(emu_input_instance_t *input, int32_t controller, input_button_t button);    int32_t emu_input_get_button_released(emu_input_instance_t *input, int32_t controller, input_button_t button);    /* Funções de controladores */    void emu_input_set_controller_connected(emu_input_instance_t *input, int32_t controller, int32_t connected);    int32_t emu_input_get_controller_connected(emu_input_instance_t *input, int32_t controller);    void emu_input_set_controller_type(emu_input_instance_t *input, int32_t controller, int32_t type);    int32_t emu_input_get_controller_type(emu_input_instance_t *input, int32_t controller);    /* Função de atualização */    int32_t emu_input_update(emu_input_instance_t *input);    bool emu_input_config_init(void);    void emu_input_config_shutdown(void);    bool emu_input_config_add_entry(emu_input_type_t type, uint32_t id, const char *name, bool is_analog);    bool emu_input_config_remove_entry(emu_input_type_t type, uint32_t id);    bool emu_input_config_set_deadzone(emu_input_type_t type, uint32_t id, float deadzone);    bool emu_input_config_set_sensitivity(emu_input_type_t type, uint32_t id, float sensitivity);    float emu_input_config_get_deadzone(emu_input_type_t type, uint32_t id);    float emu_input_config_get_sensitivity(emu_input_type_t type, uint32_t id);#ifdef __cplusplus}#endif#endif /* EMU_INPUT_INTERFACE_H */