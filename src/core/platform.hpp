#include <stdint.h>/** * @file platform.hpp * @brief Define a interface base para todas as plataformas emuladas * @author Mega_Emu Team * @version 1.0.0 * @date 2024-03-10 */#pragma once#include <string>#include <vector>#include <memory>#include <cstdint>// Compatibilidade com código Cextern "C"{#include "core.h"}namespace MegaEmu{    namespace Core    {        /**         * @brief Estrutura que representa o estado de um botão         */        struct ButtonState        {            bool pressed;  ///< Se o botão está pressionado            bool released; ///< Se o botão foi solto            bool held;     ///< Se o botão está sendo segurado        };        /**         * @brief Estrutura que representa o estado do controle         */        struct ControllerState        {            ButtonState up;     ///< Botão direcional para cima            ButtonState down;   ///< Botão direcional para baixo            ButtonState left;   ///< Botão direcional para esquerda            ButtonState right;  ///< Botão direcional para direita            ButtonState start;  ///< Botão start            ButtonState select; ///< Botão select            ButtonState a;      ///< Botão A            ButtonState b;      ///< Botão B            ButtonState x;      ///< Botão X            ButtonState y;      ///< Botão Y            ButtonState l;      ///< Botão L            ButtonState r;      ///< Botão R        };        /**         * @brief Estrutura que representa o estado do sistema         */        struct SystemState        {            bool paused;  ///< Se o sistema está pausado            bool running; ///< Se o sistema está rodando            bool debug;   ///< Se o modo de debug está ativo            bool muted;   ///< Se o áudio está mutado        };        /**         * @brief Interface base para todas as plataformas emuladas         */        class Platform        {        public:            /**             * @brief Construtor padrão             */            Platform() = default;            /**             * @brief Destrutor virtual             */            virtual ~Platform() = default;            /**             * @brief Inicializa a plataforma             * @return true se a inicialização foi bem sucedida             */            virtual bool initialize() = 0;            /**             * @brief Carrega uma ROM             * @param filename Nome do arquivo da ROM             * @return true se o carregamento foi bem sucedido             */            virtual bool loadROM(const std::string &filename) = 0;            /**             * @brief Executa um frame da emulação             */            virtual void runFrame() = 0;            /**             * @brief Reseta o sistema             */            virtual void reset() = 0;            /**             * @brief Pausa a emulação             */            virtual void pause() = 0;            /**             * @brief Continua a emulação             */            virtual void resume() = 0;            /**             * @brief Salva o estado atual             * @param slot Slot de salvamento (1-10)             * @return true se o salvamento foi bem sucedido             */            virtual bool saveState(int32_t slot) = 0;            /**             * @brief Carrega um estado salvo             * @param slot Slot de salvamento (1-10)             * @return true se o carregamento foi bem sucedido             */            virtual bool loadState(int32_t slot) = 0;            /**             * @brief Atualiza o estado do controle             * @param state Novo estado do controle             */            virtual void updateControllerState(const ControllerState &state) = 0;            /**             * @brief Obtém o buffer de vídeo atual             * @return Ponteiro para o buffer de vídeo             */            virtual const uint32_t *getVideoBuffer() const = 0;            /**             * @brief Obtém o buffer de áudio atual             * @return Ponteiro para o buffer de áudio             */            virtual const int16_t *getAudioBuffer() const = 0;            /**             * @brief Obtém o tamanho do buffer de áudio             * @return Tamanho do buffer de áudio em samples             */            virtual size_t getAudioBufferSize() const = 0;            /**             * @brief Obtém a largura da tela             * @return Largura em pixels             */            virtual int32_t getScreenWidth() const = 0;            /**             * @brief Obtém a altura da tela             * @return Altura em pixels             */            virtual int32_t getScreenHeight() const = 0;            /**             * @brief Obtém a taxa de atualização da tela             * @return Taxa de atualização em Hz             */            virtual double getRefreshRate() const = 0;            /**             * @brief Obtém a taxa de amostragem do áudio             * @return Taxa de amostragem em Hz             */            virtual int32_t getSampleRate() const = 0;            /**             * @brief Obtém o estado atual do sistema             * @return Estado atual do sistema             */            virtual SystemState getSystemState() const = 0;            /**             * @brief Define o modo de debug             * @param enabled true para ativar, false para desativar             */            virtual void setDebugMode(bool enabled) = 0;            /**             * @brief Define o estado de mute do áudio             * @param muted true para mutar, false para desmutar             */            virtual void setMuted(bool muted) = 0;        protected:            SystemState systemState;    ///< Estado atual do sistema            ControllerState controller; ///< Estado atual do controle        };    } // namespace Core} // namespace MegaEmu