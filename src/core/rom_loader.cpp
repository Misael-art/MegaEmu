#include "rom_loader.h"#include <fstream>#include <iostream>#include <filesystem>#include <algorithm>#include <cctype>namespace fs = std::filesystem;// Função auxiliar para converter string para minúsculasstd::string to_lower(const std::string &str){    std::string lower_str = str;    std::transform(lower_str.begin(), lower_str.end(), lower_str.begin(),                   [](unsigned char c)                   { return std::tolower(c); });    return lower_str;}// Implementação da função para carregar uma ROMbool rom_loader_load(const char *filepath, RomData *rom_data){    if (!filepath || !rom_data)    {        std::cerr << "Parâmetros inválidos para rom_loader_load" << std::endl;        return false;    }    std::ifstream file(filepath, std::ios::binary | std::ios::ate);    if (!file.is_open())    {        std::cerr << "Não foi possível abrir o arquivo: " << filepath << std::endl;        return false;    }    // Obter o tamanho do arquivo    std::streamsize size = file.tellg();    file.seekg(0, std::ios::beg);    // Redimensionar o vetor para armazenar os dados    rom_data->data.resize(size);    // Ler os dados do arquivo    if (!file.read(reinterpret_cast<char *>(rom_data->data.data()), size))    {        std::cerr << "Erro ao ler o arquivo: " << filepath << std::endl;        file.close();        return false;    }    file.close();    // Preencher as informações da ROM    fs::path path(filepath);    rom_data->filename = path.filename().string();    rom_data->filepath = filepath;    rom_data->size = size;    rom_data->system = rom_loader_detect_system(filepath);    std::cout << "ROM carregada: " << rom_data->filename << " ("              << rom_loader_get_system_name(rom_data->system) << ")" << std::endl;    std::cout << "Tamanho: " << rom_data->size << " bytes" << std::endl;    return true;}// Implementação da função para liberar os recursos da ROMvoid rom_loader_unload(RomData *rom_data){    if (rom_data)    {        rom_data->data.clear();        rom_data->filename.clear();        rom_data->filepath.clear();        rom_data->size = 0;        rom_data->system = SYSTEM_UNKNOWN;    }}// Implementação da função para detectar o tipo de sistemaSystemType rom_loader_detect_system(const char *filepath){    if (!filepath)    {        return SYSTEM_UNKNOWN;    }    fs::path path(filepath);    std::string extension = to_lower(path.extension().string());    // Detectar com base na extensão do arquivo    if (extension == ".nes")    {        return SYSTEM_NES;    }    else if (extension == ".sfc" || extension == ".smc")    {        return SYSTEM_SNES;    }    else if (extension == ".md" || extension == ".gen" || extension == ".bin")    {        return SYSTEM_MEGADRIVE;    }    // Se não conseguir detectar pela extensão, tentar analisar o conteúdo do arquivo    std::ifstream file(filepath, std::ios::binary);    if (!file.is_open())    {        return SYSTEM_UNKNOWN;    }    // Buffer para ler o cabeçalho    std::vector<uint8_t> header(16);    file.read(reinterpret_cast<char *>(header.data()), 16);    // Verificar assinaturas conhecidas    if (header.size() >= 4 && header[0] == 'N' && header[1] == 'E' && header[2] == 'S' && header[3] == 0x1A)    {        return SYSTEM_NES;    }    // Verificação para SNES (mais complexa, simplificada aqui)    if (header.size() >= 8)    {        // Algumas ROMs SNES têm um cabeçalho SMC de 512 bytes        // Outras verificações poderiam ser adicionadas aqui    }    // Verificação para Mega Drive (simplificada)    if (header.size() >= 16 &&        (std::string(reinterpret_cast<char *>(&header[0]), 4) == "SEGA" ||         std::string(reinterpret_cast<char *>(&header[0x100]), 4) == "SEGA"))    {        return SYSTEM_MEGADRIVE;    }    return SYSTEM_UNKNOWN;}// Implementação da função para obter o nome do sistemaconst char *rom_loader_get_system_name(SystemType system){    switch (system)    {    case SYSTEM_NES:        return "Nintendo Entertainment System";    case SYSTEM_SNES:        return "Super Nintendo";    case SYSTEM_MEGADRIVE:        return "Sega Mega Drive";    case SYSTEM_UNKNOWN:    default:        return "Sistema Desconhecido";    }}