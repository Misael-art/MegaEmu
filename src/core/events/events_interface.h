/** * @file events_interface.h * @brief Interface do sistema de eventos do emulador */#ifndef EMU_EVENTS_INTERFACE_H#define EMU_EVENTS_INTERFACE_H#include <stdint.h>#include "../core_types.h"#ifdef __cplusplusextern "C"{#endif    // Tipos de eventos    typedef enum    {        EMU_EVENT_NONE = 0,        EMU_EVENT_FRAME_START,        EMU_EVENT_FRAME_END,        EMU_EVENT_VBLANK,        EMU_EVENT_HBLANK,        EMU_EVENT_CPU_STEP,        EMU_EVENT_MEMORY_READ,        EMU_EVENT_MEMORY_WRITE,        EMU_EVENT_INTERRUPT,        EMU_EVENT_RESET,        EMU_EVENT_PAUSE,        EMU_EVENT_RESUME,        EMU_EVENT_QUIT,        EMU_EVENT_MAX    } emu_event_type_t;    // Estrutura de dados do evento    typedef struct    {        emu_event_type_t type; /**< Tipo do evento */        uint32_t timestamp;    /**< Timestamp do evento */        void *data;            /**< Dados específicos do evento */        size_t data_size;      /**< Tamanho dos dados */    } emu_event_t;    // Callback para eventos    typedef void (*emu_event_callback_t)(emu_event_t *event, void *userdata);    // Interface do sistema de eventos    typedef struct    {        // Funções de gerenciamento        int32_t (*init)(void);        void (*shutdown)(void);        int32_t (*register_callback)(emu_event_type_t type, emu_event_callback_t callback, void *userdata);        int32_t (*unregister_callback)(emu_event_type_t type, emu_event_callback_t callback);        // Funções de eventos        int32_t (*trigger_event)(emu_event_type_t type, void *data, size_t data_size);        int32_t (*process_events)(void);        // Funções de controle        void (*pause)(void);        void (*resume)(void);        void (*reset)(void);    } emu_events_interface_t;    // Obter interface do sistema de eventos    const emu_events_interface_t *emu_events_get_interface(void);#ifdef __cplusplus}#endif#endif /* EMU_EVENTS_INTERFACE_H */