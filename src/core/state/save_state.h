/** * @file save_state.h * @brief API do sistema de save states * * Este módulo implementa um sistema completo para salvar e restaurar o estado * do emulador, incluindo metadados, screenshots e compressão. Suporta múltiplos * slots, thumbnails e callbacks para integração com a interface gráfica. * * @note Parte do subsistema core/state */#ifndef EMU_SAVE_STATE_H#define EMU_SAVE_STATE_H#ifdef __cplusplusextern "C" {#endif#include "core/core_types.h"#include <stdint.h>#include <time.h>/** * @defgroup SaveStateLimits Limites para Save States * @brief Tamanhos máximos para campos de metadados * @{ */#define EMU_SAVE_META_MAX_TITLE_LEN 128   /**< Tamanho máximo para título */#define EMU_SAVE_META_MAX_DESC_LEN 256    /**< Tamanho máximo para descrição */#define EMU_SAVE_META_MAX_PLATFORM_LEN 32 /**< Tamanho máximo para nome de plataforma */#define EMU_SAVE_META_MAX_GAME_ID_LEN 64  /**< Tamanho máximo para ID do jogo *//** @} *//** * @defgroup SaveStateFlags Flags para Save States * @brief Opções que controlam o comportamento de save states * @{ */#define EMU_SAVE_FLAG_COMPRESS (1 << 0)       /**< Ativa compressão de dados */#define EMU_SAVE_FLAG_SCREENSHOT (1 << 1)     /**< Inclui screenshot/thumbnail */#define EMU_SAVE_FLAG_METADATA (1 << 2)       /**< Inclui metadados completos */#define EMU_SAVE_FLAG_TIMESTAMP (1 << 3)      /**< Inclui timestamp de criação */#define EMU_SAVE_FLAG_CHECKSUM (1 << 4)       /**< Inclui checksum para validação */#define EMU_SAVE_FLAG_PLATFORM_EXTRA (1 << 5) /**< Inclui dados extras específicos da plataforma *//** @} *//** * @brief Formato padrão recomendado para save states * * Esta configuração padrão inclui compressão, screenshot, metadados e timestamp, * proporcionando uma boa combinação de performance e recursos. */#define EMU_SAVE_FORMAT_DEFAULT (EMU_SAVE_FLAG_COMPRESS | EMU_SAVE_FLAG_SCREENSHOT | EMU_SAVE_FLAG_METADATA | EMU_SAVE_FLAG_TIMESTAMP)/** * @brief Estrutura de metadados para save state * * Contém todas as informações descritivas sobre um save state, incluindo * título, descrição, informações do jogo, timestamps e flags. */typedef struct{    char title[EMU_SAVE_META_MAX_TITLE_LEN];       /**< Título do save state */    char description[EMU_SAVE_META_MAX_DESC_LEN];  /**< Descrição opcional */    char platform[EMU_SAVE_META_MAX_PLATFORM_LEN]; /**< Plataforma (ex: "NES", "SEGA_MD") */    char game_id[EMU_SAVE_META_MAX_GAME_ID_LEN];   /**< ID do jogo */    time_t timestamp;                              /**< Timestamp de criação */    uint32_t playtime_seconds;                     /**< Tempo de jogo em segundos */    uint32_t emulator_version;                     /**< Versão do emulador */    uint8_t slot;                                  /**< Slot do save (0-9 típico) */    uint8_t thumbnail_included;                    /**< 1 se thumbnail incluso */} emu_save_metadata_t;/** * @defgroup SaveCallbacks Callbacks para Save State * @brief Tipos de callbacks para operações de save/load * @{ *//** * @brief Callback chamado durante operação de save * @param data Ponteiro para os dados * @param size Tamanho dos dados * @param user_data Dados do usuário fornecidos durante registro * @return Código de erro (EMU_ERROR_NONE se sucesso) */typedef int32_t (*emu_save_callback_t)(void *data, size_t size, void *user_data);/** * @brief Callback chamado durante operação de load * @param data Ponteiro para os dados * @param size Tamanho dos dados * @param user_data Dados do usuário fornecidos durante registro * @return Código de erro (EMU_ERROR_NONE se sucesso) */typedef int32_t (*emu_load_callback_t)(void *data, size_t size, void *user_data);/** @} *//** * @brief Estrutura para callbacks customizados de save/load * * Permite que o código cliente forneça callbacks que serão chamados durante * as operações de save e load, útil para integração com a interface gráfica. */typedef struct{    emu_save_callback_t save_callback; /**< Função chamada durante save */    emu_load_callback_t load_callback; /**< Função chamada durante load */    void *user_data;                   /**< Dados para os callbacks */} emu_state_callbacks_t;/** * @brief Estrutura para armazenar screenshot/thumbnail * * Contém uma imagem que representa visualmente o estado do jogo no momento * em que o save state foi criado. */typedef struct{    uint32_t width;   /**< Largura da imagem */    uint32_t height;  /**< Altura da imagem */    uint32_t format;  /**< Formato (RGBA8888, etc) */    uint8_t *data;    /**< Dados da imagem */    size_t data_size; /**< Tamanho dos dados */} emu_screenshot_t;/** * @defgroup SaveStateAPI API Principal * @brief Funções principais do sistema de save state * @{ *//** * @brief Inicializa o sistema de save state * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_save_state_init(void);/** * @brief Finaliza o sistema de save state e libera recursos */void emu_save_state_shutdown(void);/** * @brief Cria um novo metadado para save state * @return Ponteiro para a estrutura criada, ou NULL em caso de erro */emu_save_metadata_t *emu_save_metadata_create(void);/** * @brief Destrói um metadado e libera recursos * @param metadata Ponteiro para o metadado a ser destruído */void emu_save_metadata_destroy(emu_save_metadata_t *metadata);/** * @brief Cria uma nova screenshot com as dimensões especificadas * @param width Largura da imagem * @param height Altura da imagem * @param format Formato da imagem (RGBA8888, etc) * @return Ponteiro para a screenshot criada, ou NULL em caso de erro */emu_screenshot_t *emu_screenshot_create(uint32_t width, uint32_t height, uint32_t format);/** * @brief Destrói uma screenshot e libera recursos * @param screenshot Ponteiro para a screenshot a ser destruída */void emu_screenshot_destroy(emu_screenshot_t *screenshot);/** * @brief Salva o estado do emulador em um arquivo * @param filename Nome do arquivo para salvar * @param state_data Ponteiro para os dados de estado a serem salvos * @param data_size Tamanho dos dados de estado * @param metadata Metadados do save state (opcional, NULL para usar valores padrão) * @param screenshot Screenshot a ser incluída (opcional, NULL para não incluir) * @param callbacks Callbacks a serem chamados durante operação (opcional, NULL para não usar) * @param flags Flags que controlam o comportamento (use EMU_SAVE_FORMAT_DEFAULT para padrão) * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_save_state(const char *filename, void *state_data, size_t data_size,                   const emu_save_metadata_t *metadata, const emu_screenshot_t *screenshot,                   const emu_state_callbacks_t *callbacks, uint32_t flags);/** * @brief Carrega o estado do emulador de um arquivo * @param filename Nome do arquivo para carregar * @param state_data Ponteiro onde os dados de estado serão carregados * @param data_size Tamanho esperado dos dados de estado * @param out_metadata Se não NULL, receberá os metadados carregados * @param out_screenshot Se não NULL, receberá a screenshot carregada * @param callbacks Callbacks a serem chamados durante operação (opcional, NULL para não usar) * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_load_state(const char *filename, void *state_data, size_t data_size,                   emu_save_metadata_t **out_metadata, emu_screenshot_t **out_screenshot,                   const emu_state_callbacks_t *callbacks);/** @} *//** * @defgroup SlotAPI API de Slots * @brief Funções para trabalhar com slots numerados * @{ *//** * @brief Salva o estado do emulador em um slot numerado * @param slot Número do slot (geralmente 0-9) * @param state_data Ponteiro para os dados de estado a serem salvos * @param data_size Tamanho dos dados de estado * @param metadata Metadados do save state (opcional, NULL para usar valores padrão) * @param screenshot Screenshot a ser incluída (opcional, NULL para não incluir) * @param callbacks Callbacks a serem chamados durante operação (opcional, NULL para não usar) * @param flags Flags que controlam o comportamento (use EMU_SAVE_FORMAT_DEFAULT para padrão) * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_save_state_to_slot(int32_t slot, void *state_data, size_t data_size,                           const emu_save_metadata_t *metadata, const emu_screenshot_t *screenshot,                           const emu_state_callbacks_t *callbacks, uint32_t flags);/** * @brief Carrega o estado do emulador de um slot numerado * @param slot Número do slot (geralmente 0-9) * @param state_data Ponteiro onde os dados de estado serão carregados * @param data_size Tamanho esperado dos dados de estado * @param out_metadata Se não NULL, receberá os metadados carregados * @param out_screenshot Se não NULL, receberá a screenshot carregada * @param callbacks Callbacks a serem chamados durante operação (opcional, NULL para não usar) * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_load_state_from_slot(int32_t slot, void *state_data, size_t data_size,                             emu_save_metadata_t **out_metadata, emu_screenshot_t **out_screenshot,                             const emu_state_callbacks_t *callbacks);/** @} *//** * @defgroup StateManagementAPI API de Gerenciamento * @brief Funções para gerenciar arquivos de save state * @{ *//** * @brief Remove um arquivo de save state * @param filename Nome do arquivo a ser removido * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_delete_save_state(const char *filename);/** * @brief Remove um save state em um slot numerado * @param slot Número do slot (geralmente 0-9) * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_delete_save_slot(int32_t slot);/** * @brief Enumera todos os save states em um diretório * @param directory Diretório a ser pesquisado * @param out_metadata_list Receberá a lista de metadados encontrados * @param out_count Receberá o número de save states encontrados * @return Código de erro (EMU_ERROR_NONE se sucesso) * @note A lista retornada deve ser liberada com emu_free_save_metadata_list */int32_t emu_enumerate_save_states(const char *directory, emu_save_metadata_t ***out_metadata_list, int32_t *out_count);/** * @brief Libera uma lista de metadados alocada por emu_enumerate_save_states * @param metadata_list Lista de metadados a ser liberada * @param count Número de itens na lista */void emu_free_save_metadata_list(emu_save_metadata_t **metadata_list, int32_t count);/** @} *//** * @defgroup HelperAPI API de Utilitários * @brief Funções auxiliares para facilitar operações comuns * @{ *//** * @brief Obtém o nome de arquivo para um slot numerado * @param slot Número do slot (geralmente 0-9) * @param out_filename Buffer para receber o nome do arquivo * @param max_len Tamanho máximo do buffer * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_get_save_slot_filename(int32_t slot, char *out_filename, size_t max_len);/** * @brief Salva uma screenshot em um arquivo de imagem * @param screenshot A screenshot a ser salva * @param filename Nome do arquivo de destino * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_save_screenshot(const emu_screenshot_t *screenshot, const char *filename);/** * @brief Carrega uma screenshot de um arquivo de imagem * @param filename Nome do arquivo de origem * @return Ponteiro para a screenshot carregada, ou NULL em caso de erro */emu_screenshot_t *emu_load_screenshot(const char *filename);/** * @brief Obtém o caminho para a thumbnail de um slot * @param slot Número do slot (geralmente 0-9) * @param out_path Buffer para receber o caminho * @param max_len Tamanho máximo do buffer * @return Código de erro (EMU_ERROR_NONE se sucesso) */int32_t emu_get_slot_thumbnail_path(int32_t slot, char *out_path, size_t max_len);/** @} */#endif /* EMU_SAVE_STATE_H */