/** * @file input_config_interface.h * @brief Interface para o sistema de configuração de entrada */#ifndef EMU_INPUT_CONFIG_INTERFACE_H#define EMU_INPUT_CONFIG_INTERFACE_H#include <stdint.h>#include <stdbool.h>#ifdef __cplusplusextern "C"{#endif    /* Tipos de botões do emulador */    typedef enum    {        EMU_BTN_NONE = 0,        EMU_BTN_UP,        EMU_BTN_DOWN,        EMU_BTN_LEFT,        EMU_BTN_RIGHT,        EMU_BTN_A,        EMU_BTN_B,        EMU_BTN_C,        EMU_BTN_X,        EMU_BTN_Y,        EMU_BTN_Z,        EMU_BTN_START,        EMU_BTN_SELECT,        EMU_BTN_MODE,        EMU_BTN_MAX    } emu_button_t;    /* Estrutura de mapeamento de botões */    typedef struct    {        uint32_t keyboard_key;        uint32_t joystick_button;        uint32_t gamepad_button;    } emu_button_mapping_t;    /* Estrutura de configuração de controlador */    typedef struct emu_controller_config_t    {        bool active;        int32_t device_type;        int32_t device_id;        emu_button_mapping_t mappings[EMU_BTN_MAX];        void *platform_specific;    } emu_controller_config_t;    /* Funções de interface */    bool emu_input_config_init(void);    void emu_input_config_shutdown(void);    bool emu_input_create_controller_config(emu_controller_config_t **controller);    bool emu_input_destroy_controller_config(emu_controller_config_t *controller);    bool emu_input_add_button_mapping(emu_controller_config_t *controller, emu_button_t button, uint32_t keyboard_key, uint32_t joystick_button, uint32_t gamepad_button);    bool emu_input_remove_button_mapping(emu_controller_config_t *controller, emu_button_t button);    bool emu_input_set_device(emu_controller_config_t *controller, int32_t device_type, int32_t device_id);    bool emu_input_get_button_mapping(emu_controller_config_t *controller, emu_button_t button, emu_button_mapping_t *mapping);    bool emu_input_save_config(const char *filename);    bool emu_input_load_config(const char *filename);#ifdef __cplusplus}#endif#endif /* EMU_INPUT_CONFIG_INTERFACE_H */