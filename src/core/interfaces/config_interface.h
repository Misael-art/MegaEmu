/** * @file config_interface.h * @brief Interface do sistema de configuração do emulador */#ifndef EMU_CONFIG_INTERFACE_H#define EMU_CONFIG_INTERFACE_H#include <stdint.h>#include <stdbool.h>#include "../core_types.h"#ifdef __cplusplusextern "C"{#endif    // Tipos de dados de configuração    typedef enum    {        EMU_CONFIG_TYPE_NONE = 0,        EMU_CONFIG_TYPE_INT,        EMU_CONFIG_TYPE_FLOAT,        EMU_CONFIG_TYPE_BOOL,        EMU_CONFIG_TYPE_STRING,        EMU_CONFIG_TYPE_OBJECT,        EMU_CONFIG_TYPE_ARRAY,        EMU_CONFIG_TYPE_MAX    } emu_config_type_t;    // Valor de configuração    typedef struct    {        emu_config_type_t type;        union        {            int64_t int_value;            double float_value;            int32_t bool_value;            char *string_value;            void *object_value;            void *array_value;        };        size_t array_size;    } emu_config_value_t;    // Erro de configuração    typedef enum    {        EMU_CONFIG_ERROR_NONE = 0,        EMU_CONFIG_ERROR_NOT_FOUND,        EMU_CONFIG_ERROR_INVALID_TYPE,        EMU_CONFIG_ERROR_INVALID_VALUE,        EMU_CONFIG_ERROR_OUT_OF_MEMORY,        EMU_CONFIG_ERROR_FILE_NOT_FOUND,        EMU_CONFIG_ERROR_FILE_ACCESS,        EMU_CONFIG_ERROR_PARSE,        EMU_CONFIG_ERROR_MAX    } emu_config_error_t;    // Callback para notificação de mudanças    typedef void (*emu_config_change_callback_t)(const char *key, const emu_config_value_t *value, void *userdata);    // Interface do sistema de configuração    typedef struct    {        // Funções de gerenciamento        int32_t (*init)(void);        void (*shutdown)(void);        int32_t (*load_defaults)(void);        // Funções de acesso        int32_t (*get_int)(const char *key, int64_t *value);        int32_t (*get_float)(const char *key, double *value);        int32_t (*get_bool)(const char *key, int32_t *value);        int32_t (*get_string)(const char *key, char *value, size_t max_size);        int32_t (*get_value)(const char *key, emu_config_value_t *value);        // Funções de modificação        int32_t (*set_int)(const char *key, int64_t value);        int32_t (*set_float)(const char *key, double value);        int32_t (*set_bool)(const char *key, int32_t value);        int32_t (*set_string)(const char *key, const char *value);        int32_t (*set_value)(const char *key, const emu_config_value_t *value);        // Funções de arquivo        int32_t (*load_from_file)(const char *filename);        int32_t (*save_to_file)(const char *filename);        // Funções de notificação        int32_t (*register_change_callback)(const char *key, emu_config_change_callback_t callback, void *userdata);        int32_t (*unregister_change_callback)(const char *key, emu_config_change_callback_t callback);        // Funções de utilitário        const char *(*get_error_string)(emu_config_error_t error);    } emu_config_interface_t;    // Obter interface do sistema de configuração    const emu_config_interface_t *emu_config_get_interface(void);#ifdef __cplusplus}#endif#endif /* EMU_CONFIG_INTERFACE_H */