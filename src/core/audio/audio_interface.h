/** * @file audio_interface.h * @brief Interface do sistema de áudio */#ifndef EMU_AUDIO_INTERFACE_H#define EMU_AUDIO_INTERFACE_H#include <stdint.h>#include <stdbool.h>#ifdef __cplusplusextern "C"{#endif/* Constantes PSG */#define PSG_CHANNELS 8#define PSG_MAX_VOLUME 15#define PSG_BUFFER_SIZE 4096#define PSG_SAMPLE_RATE 44100    /* Estrutura de canal PSG */    typedef struct    {        bool enabled;         /* Canal ativo */        bool muted;           /* Canal mudo */        uint8_t volume;       /* Volume (0-15) */        uint16_t frequency;   /* Frequência em Hz */        uint16_t counter;     /* Contador de frequência */        uint8_t waveform;     /* Forma de onda atual (0 ou 1) */        uint16_t noise_shift; /* Registro de deslocamento para ruído */        uint8_t noise_tap;    /* Bit de tap para o gerador de ruído */        uint8_t noise_type;   /* Tipo de ruído */    } psg_channel_t;    /* Forward declarations */    typedef struct emu_audio_instance emu_audio_instance_t;    typedef struct emu_audio_instance *emu_audio_t;    /* Estrutura principal do sistema de áudio */    struct emu_audio_instance    {        bool initialized;                     /* Sistema inicializado */        uint32_t sample_rate;                 /* Taxa de amostragem em Hz */        uint32_t buffer_size;                 /* Tamanho do buffer em amostras */        uint32_t buffer_pos;                  /* Posição atual no buffer */        uint32_t frame_count;                 /* Contador de quadros */        uint32_t sample_count;                /* Contador de amostras */        int16_t *buffer;                      /* Buffer de saída */        psg_channel_t channels[PSG_CHANNELS]; /* Canais de áudio */        uint8_t registers[32];                /* Registradores do PSG */        void *userdata;                       /* Dados do usuário */    };    /* Funções de interface */    emu_audio_t emu_audio_create(void);    void emu_audio_destroy(emu_audio_t audio);    int32_t emu_audio_init(emu_audio_t audio);    void emu_audio_shutdown(emu_audio_t audio);    int32_t emu_audio_reset(emu_audio_t audio);    /* Funções de processamento */    int32_t emu_audio_run_frame(emu_audio_t audio);    int32_t emu_audio_run_samples(emu_audio_t audio, int32_t samples);    /* Funções de dados do usuário */    void emu_audio_set_userdata(emu_audio_t audio, void *userdata);    void *emu_audio_get_userdata(emu_audio_t audio);    /* Funções de manipulação de registradores */    void emu_audio_write_register(emu_audio_t audio, uint8_t reg, uint8_t value);    uint8_t emu_audio_read_register(emu_audio_t audio, uint8_t reg);    /* Funções de controle de canais */    void emu_audio_set_channel_volume(emu_audio_t audio, int32_t channel, uint8_t volume);    void emu_audio_set_channel_frequency(emu_audio_t audio, int32_t channel, uint16_t frequency);    void emu_audio_set_channel_waveform(emu_audio_t audio, int32_t channel, uint8_t waveform);    void emu_audio_set_channel_noise(emu_audio_t audio, int32_t channel, uint8_t type, uint16_t shift, uint8_t tap);    void emu_audio_enable_channel(emu_audio_t audio, int32_t channel, int32_t enable);    void emu_audio_mute_channel(emu_audio_t audio, int32_t channel, int32_t mute);    /* Funções de acesso ao buffer */    void emu_audio_get_buffer(emu_audio_t audio, int16_t *buffer);    int32_t emu_audio_get_frame_count(emu_audio_t audio);    int32_t emu_audio_get_sample_count(emu_audio_t audio);    int32_t emu_audio_get_buffer_pos(emu_audio_t audio);#ifdef __cplusplus}#endif#endif /* EMU_AUDIO_INTERFACE_H */