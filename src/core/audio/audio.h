#ifndef EMU_AUDIO_H#define EMU_AUDIO_H#include "../core_types.h"#include "../memory/memory_interface.h"#include "../../utils/error_handling.h"#include "../../utils/enhanced_log.h"#include <stdint.h>#ifdef __cplusplusextern "C"{#endif/* Constantes do PSG */#define PSG_CHANNELS 8#define PSG_SAMPLE_RATE 44100#define PSG_BUFFER_SIZE 2048#define PSG_MAX_VOLUME 15    /* Estrutura de canal do PSG */    typedef struct psg_channel    {        uint16_t frequency;        uint16_t counter;        uint8_t volume;        uint8_t waveform;        uint8_t noise_type;        uint8_t noise_shift;        uint8_t noise_tap;        uint8_t enabled;        uint8_t muted;    } psg_channel_t;    /* Estrutura do PSG */    struct emu_audio_instance    {        psg_channel_t channels[PSG_CHANNELS];        uint8_t registers[16];        int16_t buffer[PSG_BUFFER_SIZE];        int32_t buffer_pos;        int32_t frame_count;        int32_t sample_count;        void *userdata;    };    /* Funções do PSG */    emu_audio_t *emu_audio_create(void);    void emu_audio_destroy(emu_audio_t *audio);    int32_t emu_audio_init(emu_audio_t *audio);    void emu_audio_shutdown(emu_audio_t *audio);    int32_t emu_audio_reset(emu_audio_t *audio);    int32_t emu_audio_run_frame(emu_audio_t *audio);    int32_t emu_audio_run_samples(emu_audio_t *audio, int32_t samples);    void emu_audio_set_userdata(emu_audio_t *audio, void *userdata);    void *emu_audio_get_userdata(emu_audio_t *audio);    /* Funções de acesso aos registradores */    void emu_audio_write_register(emu_audio_t *audio, uint8_t reg, uint8_t value);    uint8_t emu_audio_read_register(emu_audio_t *audio, uint8_t reg);    /* Funções de controle de canais */    void emu_audio_set_channel_volume(emu_audio_t *audio, int32_t channel, uint8_t volume);    void emu_audio_set_channel_frequency(emu_audio_t *audio, int32_t channel, uint16_t frequency);    void emu_audio_set_channel_waveform(emu_audio_t *audio, int32_t channel, uint8_t waveform);    void emu_audio_set_channel_noise(emu_audio_t *audio, int32_t channel, uint8_t type, uint8_t shift, uint8_t tap);    void emu_audio_enable_channel(emu_audio_t *audio, int32_t channel, int32_t enable);    void emu_audio_mute_channel(emu_audio_t *audio, int32_t channel, int32_t mute);    /* Funções de acesso ao buffer */    void emu_audio_get_buffer(emu_audio_t *audio, int16_t *buffer);    int32_t emu_audio_get_frame_count(emu_audio_t *audio);    int32_t emu_audio_get_sample_count(emu_audio_t *audio);    int32_t emu_audio_get_buffer_pos(emu_audio_t *audio);#ifdef __cplusplus}#endif#endif /* EMU_AUDIO_H */