/** * @file error.h * @brief Definições de códigos de erro para o emulador */#ifndef EMU_ERROR_H#define EMU_ERROR_H#include "../utils/error_handling.h"// Códigos de erro gerais#define EMU_ERROR_NONE 0#define EMU_ERROR_INVALID_PARAM 1#define EMU_ERROR_MEMORY 2#define EMU_ERROR_FILE_OPERATION_FAILED 3#define EMU_ERROR_INVALID_ADDRESS 4#define EMU_ERROR_INVALID_STATE 5#define EMU_ERROR_NOT_IMPLEMENTED 6#define EMU_ERROR_BUFFER_OVERFLOW 7#define EMU_ERROR_TIMEOUT 8#define EMU_ERROR_RESOURCE_NOT_FOUND 9#define EMU_ERROR_INITIALIZATION_FAILED 10// Macro para verificar se um ponteiro é nulo#define EMU_CHECK_NULL(ptr, msg)        \    if (!(ptr))                         \    {                                   \        EMU_LOG_ERROR(msg);             \        return EMU_ERROR_INVALID_PARAM; \    }// Macro para lançar um erro#define EMU_THROW(error_code, msg) \    EMU_LOG_ERROR(msg);            \    return error_code;// Macro para marcar parâmetros não utilizados#define EMU_UNUSED(x) (void)(x)#endif // EMU_ERROR_H